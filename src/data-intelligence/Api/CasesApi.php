<?php
/**
 * CasesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPIDataIntelligence\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * finAPI Data Intelligence RESTful Services
 *
 * The following pages give you some general information on how to use the API.  The actual API services documentation then follows further below. You can use the menu to jump between API sections.   This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the 'Authorization' section of the API, or just use the OAUTH button that can be found near the TRY button.   You should also check out the Developer Portal for more information. If you need any help with the API, contact support@finapi.io   <sub>Application-Version: 1.582.0</sub>
 *
 * The version of the OpenAPI document: 2022.38.1
 * Contact: kontakt@finapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIDataIntelligence\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPIDataIntelligence\Client\ApiException;
use OpenAPIDataIntelligence\Client\Configuration;
use OpenAPIDataIntelligence\Client\HeaderSelector;
use OpenAPIDataIntelligence\Client\ObjectSerializer;

/**
 * CasesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPIDataIntelligence\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CasesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createCase
     *
     * Create a case
     *
     * @param  \OpenAPIDataIntelligence\Client\Model\CreateCaseParams $create_case_params create_case_params (required)
     *
     * @throws \OpenAPIDataIntelligence\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPIDataIntelligence\Client\Model\CaseResource|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessage
     */
    public function createCase($create_case_params)
    {
        list($response) = $this->createCaseWithHttpInfo($create_case_params);
        return $response;
    }

    /**
     * Operation createCaseWithHttpInfo
     *
     * Create a case
     *
     * @param  \OpenAPIDataIntelligence\Client\Model\CreateCaseParams $create_case_params (required)
     *
     * @throws \OpenAPIDataIntelligence\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPIDataIntelligence\Client\Model\CaseResource|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCaseWithHttpInfo($create_case_params)
    {
        $request = $this->createCaseRequest($create_case_params);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 201:
                    if ('\OpenAPIDataIntelligence\Client\Model\CaseResource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\CaseResource' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\CaseResource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 422:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 423:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPIDataIntelligence\Client\Model\CaseResource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\CaseResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 423:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation createCaseAsync
     *
     * Create a case
     *
     * @param  \OpenAPIDataIntelligence\Client\Model\CreateCaseParams $create_case_params (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCaseAsync($create_case_params)
    {
        return $this->createCaseAsyncWithHttpInfo($create_case_params)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCaseAsyncWithHttpInfo
     *
     * Create a case
     *
     * @param  \OpenAPIDataIntelligence\Client\Model\CreateCaseParams $create_case_params (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCaseAsyncWithHttpInfo($create_case_params)
    {
        $returnType = '\OpenAPIDataIntelligence\Client\Model\CaseResource';
        $request = $this->createCaseRequest($create_case_params);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCase'
     *
     * @param  \OpenAPIDataIntelligence\Client\Model\CreateCaseParams $create_case_params (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCaseRequest($create_case_params)
    {

        // verify the required parameter 'create_case_params' is set
        if ($create_case_params === null || (is_array($create_case_params) && count($create_case_params) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_case_params when calling createCase'
            );
        }

        $resourcePath = '/cases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_case_params)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_case_params));
            } else {
                $httpBody = $create_case_params;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchAllCases
     *
     * Get all cases
     *
     *
     * @throws \OpenAPIDataIntelligence\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPIDataIntelligence\Client\Model\UserCasesResource|\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessage
     */
    public function fetchAllCases()
    {
        list($response) = $this->fetchAllCasesWithHttpInfo();
        return $response;
    }

    /**
     * Operation fetchAllCasesWithHttpInfo
     *
     * Get all cases
     *
     *
     * @throws \OpenAPIDataIntelligence\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPIDataIntelligence\Client\Model\UserCasesResource|\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllCasesWithHttpInfo()
    {
        $request = $this->fetchAllCasesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPIDataIntelligence\Client\Model\UserCasesResource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\UserCasesResource' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\UserCasesResource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPIDataIntelligence\Client\Model\UserCasesResource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\UserCasesResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation fetchAllCasesAsync
     *
     * Get all cases
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllCasesAsync()
    {
        return $this->fetchAllCasesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchAllCasesAsyncWithHttpInfo
     *
     * Get all cases
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllCasesAsyncWithHttpInfo()
    {
        $returnType = '\OpenAPIDataIntelligence\Client\Model\UserCasesResource';
        $request = $this->fetchAllCasesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchAllCases'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fetchAllCasesRequest()
    {

        $resourcePath = '/cases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchAllReportsOfCases
     *
     * Get all reports
     *
     * @param  string $case_id case_id (required)
     * @param  bool $with_transactions Defines whether the report should include transactions data or not. By default, if not specified, the value of the parameter from the given case file is inherited. The value from the case file may be reset by providing the &lt;code&gt;withTransactions&lt;/code&gt; parameter at the report getting level. (optional)
     * @param  bool $show_only_active_contracts Defines whether the report should include only active contracts or not. By default, if not specified, the value of the parameter is set &lt;code&gt;false&lt;/code&gt;. If the parameter is set to &lt;code&gt;false&lt;/code&gt;, then the report will display all ACTIVE, INACTIVE and UNKNOWN contracts. If the parameter is set to &lt;code&gt;true&lt;/code&gt;, then the report will display only ACTIVE contracts. (optional)
     *
     * @throws \OpenAPIDataIntelligence\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPIDataIntelligence\Client\Model\ReportsForCaseResource|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessage
     */
    public function fetchAllReportsOfCases($case_id, $with_transactions = null, $show_only_active_contracts = null)
    {
        list($response) = $this->fetchAllReportsOfCasesWithHttpInfo($case_id, $with_transactions, $show_only_active_contracts);
        return $response;
    }

    /**
     * Operation fetchAllReportsOfCasesWithHttpInfo
     *
     * Get all reports
     *
     * @param  string $case_id (required)
     * @param  bool $with_transactions Defines whether the report should include transactions data or not. By default, if not specified, the value of the parameter from the given case file is inherited. The value from the case file may be reset by providing the &lt;code&gt;withTransactions&lt;/code&gt; parameter at the report getting level. (optional)
     * @param  bool $show_only_active_contracts Defines whether the report should include only active contracts or not. By default, if not specified, the value of the parameter is set &lt;code&gt;false&lt;/code&gt;. If the parameter is set to &lt;code&gt;false&lt;/code&gt;, then the report will display all ACTIVE, INACTIVE and UNKNOWN contracts. If the parameter is set to &lt;code&gt;true&lt;/code&gt;, then the report will display only ACTIVE contracts. (optional)
     *
     * @throws \OpenAPIDataIntelligence\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPIDataIntelligence\Client\Model\ReportsForCaseResource|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllReportsOfCasesWithHttpInfo($case_id, $with_transactions = null, $show_only_active_contracts = null)
    {
        $request = $this->fetchAllReportsOfCasesRequest($case_id, $with_transactions, $show_only_active_contracts);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPIDataIntelligence\Client\Model\ReportsForCaseResource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ReportsForCaseResource' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ReportsForCaseResource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPIDataIntelligence\Client\Model\ReportsForCaseResource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ReportsForCaseResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation fetchAllReportsOfCasesAsync
     *
     * Get all reports
     *
     * @param  string $case_id (required)
     * @param  bool $with_transactions Defines whether the report should include transactions data or not. By default, if not specified, the value of the parameter from the given case file is inherited. The value from the case file may be reset by providing the &lt;code&gt;withTransactions&lt;/code&gt; parameter at the report getting level. (optional)
     * @param  bool $show_only_active_contracts Defines whether the report should include only active contracts or not. By default, if not specified, the value of the parameter is set &lt;code&gt;false&lt;/code&gt;. If the parameter is set to &lt;code&gt;false&lt;/code&gt;, then the report will display all ACTIVE, INACTIVE and UNKNOWN contracts. If the parameter is set to &lt;code&gt;true&lt;/code&gt;, then the report will display only ACTIVE contracts. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllReportsOfCasesAsync($case_id, $with_transactions = null, $show_only_active_contracts = null)
    {
        return $this->fetchAllReportsOfCasesAsyncWithHttpInfo($case_id, $with_transactions, $show_only_active_contracts)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchAllReportsOfCasesAsyncWithHttpInfo
     *
     * Get all reports
     *
     * @param  string $case_id (required)
     * @param  bool $with_transactions Defines whether the report should include transactions data or not. By default, if not specified, the value of the parameter from the given case file is inherited. The value from the case file may be reset by providing the &lt;code&gt;withTransactions&lt;/code&gt; parameter at the report getting level. (optional)
     * @param  bool $show_only_active_contracts Defines whether the report should include only active contracts or not. By default, if not specified, the value of the parameter is set &lt;code&gt;false&lt;/code&gt;. If the parameter is set to &lt;code&gt;false&lt;/code&gt;, then the report will display all ACTIVE, INACTIVE and UNKNOWN contracts. If the parameter is set to &lt;code&gt;true&lt;/code&gt;, then the report will display only ACTIVE contracts. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllReportsOfCasesAsyncWithHttpInfo($case_id, $with_transactions = null, $show_only_active_contracts = null)
    {
        $returnType = '\OpenAPIDataIntelligence\Client\Model\ReportsForCaseResource';
        $request = $this->fetchAllReportsOfCasesRequest($case_id, $with_transactions, $show_only_active_contracts);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchAllReportsOfCases'
     *
     * @param  string $case_id (required)
     * @param  bool $with_transactions Defines whether the report should include transactions data or not. By default, if not specified, the value of the parameter from the given case file is inherited. The value from the case file may be reset by providing the &lt;code&gt;withTransactions&lt;/code&gt; parameter at the report getting level. (optional)
     * @param  bool $show_only_active_contracts Defines whether the report should include only active contracts or not. By default, if not specified, the value of the parameter is set &lt;code&gt;false&lt;/code&gt;. If the parameter is set to &lt;code&gt;false&lt;/code&gt;, then the report will display all ACTIVE, INACTIVE and UNKNOWN contracts. If the parameter is set to &lt;code&gt;true&lt;/code&gt;, then the report will display only ACTIVE contracts. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fetchAllReportsOfCasesRequest($case_id, $with_transactions = null, $show_only_active_contracts = null)
    {

        // verify the required parameter 'case_id' is set
        if ($case_id === null || (is_array($case_id) && count($case_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $case_id when calling fetchAllReportsOfCases'
            );
        }



        $resourcePath = '/cases/{caseId}/reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_transactions,
            'withTransactions', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_only_active_contracts,
            'showOnlyActiveContracts', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($case_id !== null) {
            $resourcePath = str_replace(
                '{' . 'caseId' . '}',
                ObjectSerializer::toPathValue($case_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchDatasourcesOfCases
     *
     * Get a list of registered data sources
     *
     * @param  string $case_id UUID of the case file (required)
     *
     * @throws \OpenAPIDataIntelligence\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPIDataIntelligence\Client\Model\DataSources|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessage
     */
    public function fetchDatasourcesOfCases($case_id)
    {
        list($response) = $this->fetchDatasourcesOfCasesWithHttpInfo($case_id);
        return $response;
    }

    /**
     * Operation fetchDatasourcesOfCasesWithHttpInfo
     *
     * Get a list of registered data sources
     *
     * @param  string $case_id UUID of the case file (required)
     *
     * @throws \OpenAPIDataIntelligence\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPIDataIntelligence\Client\Model\DataSources|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized|\OpenAPIDataIntelligence\Client\Model\ErrorMessage|\OpenAPIDataIntelligence\Client\Model\ErrorMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchDatasourcesOfCasesWithHttpInfo($case_id)
    {
        $request = $this->fetchDatasourcesOfCasesRequest($case_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPIDataIntelligence\Client\Model\DataSources' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\DataSources' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\DataSources', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIDataIntelligence\Client\Model\ErrorMessage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIDataIntelligence\Client\Model\ErrorMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPIDataIntelligence\Client\Model\DataSources';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\DataSources',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessageUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIDataIntelligence\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation fetchDatasourcesOfCasesAsync
     *
     * Get a list of registered data sources
     *
     * @param  string $case_id UUID of the case file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchDatasourcesOfCasesAsync($case_id)
    {
        return $this->fetchDatasourcesOfCasesAsyncWithHttpInfo($case_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchDatasourcesOfCasesAsyncWithHttpInfo
     *
     * Get a list of registered data sources
     *
     * @param  string $case_id UUID of the case file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchDatasourcesOfCasesAsyncWithHttpInfo($case_id)
    {
        $returnType = '\OpenAPIDataIntelligence\Client\Model\DataSources';
        $request = $this->fetchDatasourcesOfCasesRequest($case_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchDatasourcesOfCases'
     *
     * @param  string $case_id UUID of the case file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fetchDatasourcesOfCasesRequest($case_id)
    {

        // verify the required parameter 'case_id' is set
        if ($case_id === null || (is_array($case_id) && count($case_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $case_id when calling fetchDatasourcesOfCases'
            );
        }

        $resourcePath = '/cases/{caseId}/dataSources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($case_id !== null) {
            $resourcePath = str_replace(
                '{' . 'caseId' . '}',
                ObjectSerializer::toPathValue($case_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
