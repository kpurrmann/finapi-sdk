<?php
/**
 * Contracts
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPIDataIntelligence\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * finAPI Data Intelligence RESTful Services
 *
 * The following pages give you some general information on how to use the API.  The actual API services documentation then follows further below. You can use the menu to jump between API sections.   This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the 'Authorization' section of the API, or just use the OAUTH button that can be found near the TRY button.   You should also check out the Developer Portal for more information. If you need any help with the API, contact support@finapi.io   <sub>Application-Version: 1.582.0</sub>
 *
 * The version of the OpenAPI document: 2022.38.1
 * Contact: kontakt@finapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIDataIntelligence\Client\Model;

use \ArrayAccess;
use \OpenAPIDataIntelligence\Client\ObjectSerializer;

/**
 * Contracts Class Doc Comment
 *
 * @category Class
 * @description Contracts of the user, as reported by SCHUFA.
 * @package  OpenAPIDataIntelligence\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Contracts implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Contracts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'parent_id' => 'string',
        'characteristic_code' => 'string',
        'description' => 'string',
        'contract_date' => 'string',
        'account_number' => 'string',
        'amount' => 'float',
        'currency' => 'string',
        'number_of_rates' => 'int',
        'type_of_rate' => 'string',
        'text' => 'string',
        'characteristic_attributes' => '\OpenAPIDataIntelligence\Client\Model\ContractCharacteristicAttribute'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'parent_id' => null,
        'characteristic_code' => null,
        'description' => null,
        'contract_date' => null,
        'account_number' => null,
        'amount' => null,
        'currency' => null,
        'number_of_rates' => null,
        'type_of_rate' => null,
        'text' => null,
        'characteristic_attributes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'parent_id' => false,
		'characteristic_code' => false,
		'description' => false,
		'contract_date' => false,
		'account_number' => false,
		'amount' => false,
		'currency' => false,
		'number_of_rates' => false,
		'type_of_rate' => false,
		'text' => false,
		'characteristic_attributes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'parent_id' => 'parentId',
        'characteristic_code' => 'characteristicCode',
        'description' => 'description',
        'contract_date' => 'contractDate',
        'account_number' => 'accountNumber',
        'amount' => 'amount',
        'currency' => 'currency',
        'number_of_rates' => 'numberOfRates',
        'type_of_rate' => 'typeOfRate',
        'text' => 'text',
        'characteristic_attributes' => 'characteristicAttributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parent_id' => 'setParentId',
        'characteristic_code' => 'setCharacteristicCode',
        'description' => 'setDescription',
        'contract_date' => 'setContractDate',
        'account_number' => 'setAccountNumber',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'number_of_rates' => 'setNumberOfRates',
        'type_of_rate' => 'setTypeOfRate',
        'text' => 'setText',
        'characteristic_attributes' => 'setCharacteristicAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parent_id' => 'getParentId',
        'characteristic_code' => 'getCharacteristicCode',
        'description' => 'getDescription',
        'contract_date' => 'getContractDate',
        'account_number' => 'getAccountNumber',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'number_of_rates' => 'getNumberOfRates',
        'type_of_rate' => 'getTypeOfRate',
        'text' => 'getText',
        'characteristic_attributes' => 'getCharacteristicAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_OF_RATE_MONTHLY = 'MONTHLY';
    public const TYPE_OF_RATE_YEARLY = 'YEARLY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeOfRateAllowableValues()
    {
        return [
            self::TYPE_OF_RATE_MONTHLY,
            self::TYPE_OF_RATE_YEARLY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('characteristic_code', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('contract_date', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('number_of_rates', $data ?? [], null);
        $this->setIfExists('type_of_rate', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('characteristic_attributes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['characteristic_code'] === null) {
            $invalidProperties[] = "'characteristic_code' can't be null";
        }
        if (!is_null($this->container['account_number']) && (mb_strlen($this->container['account_number']) > 25)) {
            $invalidProperties[] = "invalid value for 'account_number', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be bigger than or equal to 3.";
        }

        $allowedValues = $this->getTypeOfRateAllowableValues();
        if (!is_null($this->container['type_of_rate']) && !in_array($this->container['type_of_rate'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type_of_rate', must be one of '%s'",
                $this->container['type_of_rate'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['characteristic_attributes'] === null) {
            $invalidProperties[] = "'characteristic_attributes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Id of the unique element.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string|null $parent_id If this element is set, it is a subelement of another element. The parentID refers to the ID of the other element.
     *
     * @return self
     */
    public function setParentId($parent_id)
    {

        if (is_null($parent_id)) {
            throw new \InvalidArgumentException('non-nullable parent_id cannot be null');
        }

        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets characteristic_code
     *
     * @return string
     */
    public function getCharacteristicCode()
    {
        return $this->container['characteristic_code'];
    }

    /**
     * Sets characteristic_code
     *
     * @param string $characteristic_code The characteristic code (Merkmalcode) describes the reason for the query.
     *
     * @return self
     */
    public function setCharacteristicCode($characteristic_code)
    {

        if (is_null($characteristic_code)) {
            throw new \InvalidArgumentException('non-nullable characteristic_code cannot be null');
        }

        $this->container['characteristic_code'] = $characteristic_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the contract.
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets contract_date
     *
     * @return string|null
     */
    public function getContractDate()
    {
        return $this->container['contract_date'];
    }

    /**
     * Sets contract_date
     *
     * @param string|null $contract_date Contract date in the format '<code>YYYY-MM-DD</code>'. Depending on the feature code, the date can represent various facts relating to the contract's subject matter, e.g. the date of the contract or the date of the first installment (e.g. in the case of loans). In the case of credit rates, the current date is often specified here. Sometimes the field may return the data, like <code>UNBEFRISTET</code> for unfixed contracts, thus making the information in this field not reliable.
     *
     * @return self
     */
    public function setContractDate($contract_date)
    {

        if (is_null($contract_date)) {
            throw new \InvalidArgumentException('non-nullable contract_date cannot be null');
        }

        $this->container['contract_date'] = $contract_date;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number The account number, which is used for the contract.
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (!is_null($account_number) && (mb_strlen($account_number) > 25)) {
            throw new \InvalidArgumentException('invalid length for $account_number when calling Contracts., must be smaller than or equal to 25.');
        }


        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount Amount, paid for the contract.
     *
     * @return self
     */
    public function setAmount($amount)
    {

        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency of the amount.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (!is_null($currency) && (mb_strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling Contracts., must be smaller than or equal to 3.');
        }
        if (!is_null($currency) && (mb_strlen($currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling Contracts., must be bigger than or equal to 3.');
        }


        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets number_of_rates
     *
     * @return int|null
     */
    public function getNumberOfRates()
    {
        return $this->container['number_of_rates'];
    }

    /**
     * Sets number_of_rates
     *
     * @param int|null $number_of_rates Number of installments, that have been agreed in terms of the contract.
     *
     * @return self
     */
    public function setNumberOfRates($number_of_rates)
    {

        if (is_null($number_of_rates)) {
            throw new \InvalidArgumentException('non-nullable number_of_rates cannot be null');
        }

        $this->container['number_of_rates'] = $number_of_rates;

        return $this;
    }

    /**
     * Gets type_of_rate
     *
     * @return string|null
     */
    public function getTypeOfRate()
    {
        return $this->container['type_of_rate'];
    }

    /**
     * Sets type_of_rate
     *
     * @param string|null $type_of_rate Type of rate. Can be: <ul>   <li><code>MONTHLY</code> - monthly rate</li>   <li><code>YEARLY</code> - yearly rate</li> </ul>
     *
     * @return self
     */
    public function setTypeOfRate($type_of_rate)
    {
        $allowedValues = $this->getTypeOfRateAllowableValues();
        if (!is_null($type_of_rate) && !in_array($type_of_rate, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type_of_rate', must be one of '%s'",
                    $type_of_rate,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($type_of_rate)) {
            throw new \InvalidArgumentException('non-nullable type_of_rate cannot be null');
        }

        $this->container['type_of_rate'] = $type_of_rate;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text Text, related to the contract.
     *
     * @return self
     */
    public function setText($text)
    {

        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }

        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets characteristic_attributes
     *
     * @return \OpenAPIDataIntelligence\Client\Model\ContractCharacteristicAttribute
     */
    public function getCharacteristicAttributes()
    {
        return $this->container['characteristic_attributes'];
    }

    /**
     * Sets characteristic_attributes
     *
     * @param \OpenAPIDataIntelligence\Client\Model\ContractCharacteristicAttribute $characteristic_attributes characteristic_attributes
     *
     * @return self
     */
    public function setCharacteristicAttributes($characteristic_attributes)
    {

        if (is_null($characteristic_attributes)) {
            throw new \InvalidArgumentException('non-nullable characteristic_attributes cannot be null');
        }

        $this->container['characteristic_attributes'] = $characteristic_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


