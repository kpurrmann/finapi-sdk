<?php
/**
 * B2BTransactionBalanceResource
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPIDataIntelligence\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * finAPI Data Intelligence RESTful Services
 *
 * The following pages give you some general information on how to use the API.  The actual API services documentation then follows further below. You can use the menu to jump between API sections.   This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the 'Authorization' section of the API, or just use the OAUTH button that can be found near the TRY button.   You should also check out the Developer Portal for more information. If you need any help with the API, contact support@finapi.io   <sub>Application-Version: 1.582.0</sub>
 *
 * The version of the OpenAPI document: 2022.38.1
 * Contact: kontakt@finapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIDataIntelligence\Client\Model;

use \ArrayAccess;
use \OpenAPIDataIntelligence\Client\ObjectSerializer;

/**
 * B2BTransactionBalanceResource Class Doc Comment
 *
 * @category Class
 * @description Account balances
 * @package  OpenAPIDataIntelligence\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class B2BTransactionBalanceResource implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'B2BTransactionBalanceResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'balances_start_date' => 'string',
        'total_balances_days_count' => 'int',
        'balance' => 'float',
        'average_balance' => 'float',
        'minimum_balance' => 'float',
        'minimum_balance_date' => 'string',
        'maximum_balance' => 'float',
        'maximum_balance_date' => 'string',
        'overdraft_limit' => 'float',
        'spending' => 'float',
        'income' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'balances_start_date' => null,
        'total_balances_days_count' => null,
        'balance' => null,
        'average_balance' => null,
        'minimum_balance' => null,
        'minimum_balance_date' => null,
        'maximum_balance' => null,
        'maximum_balance_date' => null,
        'overdraft_limit' => null,
        'spending' => null,
        'income' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'balances_start_date' => false,
		'total_balances_days_count' => false,
		'balance' => false,
		'average_balance' => false,
		'minimum_balance' => false,
		'minimum_balance_date' => false,
		'maximum_balance' => false,
		'maximum_balance_date' => false,
		'overdraft_limit' => false,
		'spending' => false,
		'income' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'balances_start_date' => 'balancesStartDate',
        'total_balances_days_count' => 'totalBalancesDaysCount',
        'balance' => 'balance',
        'average_balance' => 'averageBalance',
        'minimum_balance' => 'minimumBalance',
        'minimum_balance_date' => 'minimumBalanceDate',
        'maximum_balance' => 'maximumBalance',
        'maximum_balance_date' => 'maximumBalanceDate',
        'overdraft_limit' => 'overdraftLimit',
        'spending' => 'spending',
        'income' => 'income'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'balances_start_date' => 'setBalancesStartDate',
        'total_balances_days_count' => 'setTotalBalancesDaysCount',
        'balance' => 'setBalance',
        'average_balance' => 'setAverageBalance',
        'minimum_balance' => 'setMinimumBalance',
        'minimum_balance_date' => 'setMinimumBalanceDate',
        'maximum_balance' => 'setMaximumBalance',
        'maximum_balance_date' => 'setMaximumBalanceDate',
        'overdraft_limit' => 'setOverdraftLimit',
        'spending' => 'setSpending',
        'income' => 'setIncome'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'balances_start_date' => 'getBalancesStartDate',
        'total_balances_days_count' => 'getTotalBalancesDaysCount',
        'balance' => 'getBalance',
        'average_balance' => 'getAverageBalance',
        'minimum_balance' => 'getMinimumBalance',
        'minimum_balance_date' => 'getMinimumBalanceDate',
        'maximum_balance' => 'getMaximumBalance',
        'maximum_balance_date' => 'getMaximumBalanceDate',
        'overdraft_limit' => 'getOverdraftLimit',
        'spending' => 'getSpending',
        'income' => 'getIncome'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('balances_start_date', $data ?? [], null);
        $this->setIfExists('total_balances_days_count', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('average_balance', $data ?? [], null);
        $this->setIfExists('minimum_balance', $data ?? [], null);
        $this->setIfExists('minimum_balance_date', $data ?? [], null);
        $this->setIfExists('maximum_balance', $data ?? [], null);
        $this->setIfExists('maximum_balance_date', $data ?? [], null);
        $this->setIfExists('overdraft_limit', $data ?? [], null);
        $this->setIfExists('spending', $data ?? [], null);
        $this->setIfExists('income', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['balance'] === null) {
            $invalidProperties[] = "'balance' can't be null";
        }
        if ($this->container['average_balance'] === null) {
            $invalidProperties[] = "'average_balance' can't be null";
        }
        if ($this->container['minimum_balance'] === null) {
            $invalidProperties[] = "'minimum_balance' can't be null";
        }
        if ($this->container['minimum_balance_date'] === null) {
            $invalidProperties[] = "'minimum_balance_date' can't be null";
        }
        if ($this->container['maximum_balance'] === null) {
            $invalidProperties[] = "'maximum_balance' can't be null";
        }
        if ($this->container['maximum_balance_date'] === null) {
            $invalidProperties[] = "'maximum_balance_date' can't be null";
        }
        if ($this->container['spending'] === null) {
            $invalidProperties[] = "'spending' can't be null";
        }
        if ($this->container['income'] === null) {
            $invalidProperties[] = "'income' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets balances_start_date
     *
     * @return string|null
     */
    public function getBalancesStartDate()
    {
        return $this->container['balances_start_date'];
    }

    /**
     * Sets balances_start_date
     *
     * @param string|null $balances_start_date Timestamp of the date, when user's first daily balance data was retrieved for the given account in the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin).
     *
     * @return self
     */
    public function setBalancesStartDate($balances_start_date)
    {

        if (is_null($balances_start_date)) {
            throw new \InvalidArgumentException('non-nullable balances_start_date cannot be null');
        }

        $this->container['balances_start_date'] = $balances_start_date;

        return $this;
    }

    /**
     * Gets total_balances_days_count
     *
     * @return int|null
     */
    public function getTotalBalancesDaysCount()
    {
        return $this->container['total_balances_days_count'];
    }

    /**
     * Sets total_balances_days_count
     *
     * @param int|null $total_balances_days_count The number of days, daily balances for which were retrieved for the given account in the report period under review.
     *
     * @return self
     */
    public function setTotalBalancesDaysCount($total_balances_days_count)
    {

        if (is_null($total_balances_days_count)) {
            throw new \InvalidArgumentException('non-nullable total_balances_days_count cannot be null');
        }

        $this->container['total_balances_days_count'] = $total_balances_days_count;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float $balance Latest account's balance
     *
     * @return self
     */
    public function setBalance($balance)
    {

        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }

        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets average_balance
     *
     * @return float
     */
    public function getAverageBalance()
    {
        return $this->container['average_balance'];
    }

    /**
     * Sets average_balance
     *
     * @param float $average_balance The average balance amount during the period specified in maxDaysForCase.
     *
     * @return self
     */
    public function setAverageBalance($average_balance)
    {

        if (is_null($average_balance)) {
            throw new \InvalidArgumentException('non-nullable average_balance cannot be null');
        }

        $this->container['average_balance'] = $average_balance;

        return $this;
    }

    /**
     * Gets minimum_balance
     *
     * @return float
     */
    public function getMinimumBalance()
    {
        return $this->container['minimum_balance'];
    }

    /**
     * Sets minimum_balance
     *
     * @param float $minimum_balance The lowest balance available on the account within specified maxDaysForCase.
     *
     * @return self
     */
    public function setMinimumBalance($minimum_balance)
    {

        if (is_null($minimum_balance)) {
            throw new \InvalidArgumentException('non-nullable minimum_balance cannot be null');
        }

        $this->container['minimum_balance'] = $minimum_balance;

        return $this;
    }

    /**
     * Gets minimum_balance_date
     *
     * @return string
     */
    public function getMinimumBalanceDate()
    {
        return $this->container['minimum_balance_date'];
    }

    /**
     * Sets minimum_balance_date
     *
     * @param string $minimum_balance_date Date on which the given account had the lowest balance available within the given period. Date format '<code>YYYY-MM-DD</code>'.
     *
     * @return self
     */
    public function setMinimumBalanceDate($minimum_balance_date)
    {

        if (is_null($minimum_balance_date)) {
            throw new \InvalidArgumentException('non-nullable minimum_balance_date cannot be null');
        }

        $this->container['minimum_balance_date'] = $minimum_balance_date;

        return $this;
    }

    /**
     * Gets maximum_balance
     *
     * @return float
     */
    public function getMaximumBalance()
    {
        return $this->container['maximum_balance'];
    }

    /**
     * Sets maximum_balance
     *
     * @param float $maximum_balance The highest balance available on the account within the specified maxDaysForCase.
     *
     * @return self
     */
    public function setMaximumBalance($maximum_balance)
    {

        if (is_null($maximum_balance)) {
            throw new \InvalidArgumentException('non-nullable maximum_balance cannot be null');
        }

        $this->container['maximum_balance'] = $maximum_balance;

        return $this;
    }

    /**
     * Gets maximum_balance_date
     *
     * @return string
     */
    public function getMaximumBalanceDate()
    {
        return $this->container['maximum_balance_date'];
    }

    /**
     * Sets maximum_balance_date
     *
     * @param string $maximum_balance_date Date on which the given account had the highest balance available within the given period. Date format '<code>YYYY-MM-DD</code>'.
     *
     * @return self
     */
    public function setMaximumBalanceDate($maximum_balance_date)
    {

        if (is_null($maximum_balance_date)) {
            throw new \InvalidArgumentException('non-nullable maximum_balance_date cannot be null');
        }

        $this->container['maximum_balance_date'] = $maximum_balance_date;

        return $this;
    }

    /**
     * Gets overdraft_limit
     *
     * @return float|null
     */
    public function getOverdraftLimit()
    {
        return $this->container['overdraft_limit'];
    }

    /**
     * Sets overdraft_limit
     *
     * @param float|null $overdraft_limit The maximum allowed overdraft for the given account if provided by a bank.
     *
     * @return self
     */
    public function setOverdraftLimit($overdraft_limit)
    {

        if (is_null($overdraft_limit)) {
            throw new \InvalidArgumentException('non-nullable overdraft_limit cannot be null');
        }

        $this->container['overdraft_limit'] = $overdraft_limit;

        return $this;
    }

    /**
     * Gets spending
     *
     * @return float
     */
    public function getSpending()
    {
        return $this->container['spending'];
    }

    /**
     * Sets spending
     *
     * @param float $spending Spending of the account within maxDaysForCase.
     *
     * @return self
     */
    public function setSpending($spending)
    {

        if (is_null($spending)) {
            throw new \InvalidArgumentException('non-nullable spending cannot be null');
        }

        $this->container['spending'] = $spending;

        return $this;
    }

    /**
     * Gets income
     *
     * @return float
     */
    public function getIncome()
    {
        return $this->container['income'];
    }

    /**
     * Sets income
     *
     * @param float $income Income of the account within maxDaysForCase.
     *
     * @return self
     */
    public function setIncome($income)
    {

        if (is_null($income)) {
            throw new \InvalidArgumentException('non-nullable income cannot be null');
        }

        $this->container['income'] = $income;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


