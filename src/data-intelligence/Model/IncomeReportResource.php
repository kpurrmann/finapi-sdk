<?php
/**
 * IncomeReportResource
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPIDataIntelligence\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * finAPI Data Intelligence RESTful Services
 *
 * The following pages give you some general information on how to use the API.  The actual API services documentation then follows further below. You can use the menu to jump between API sections.   This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the 'Authorization' section of the API, or just use the OAUTH button that can be found near the TRY button.   You should also check out the Developer Portal for more information. If you need any help with the API, contact support@finapi.io   <sub>Application-Version: 1.582.0</sub>
 *
 * The version of the OpenAPI document: 2022.38.1
 * Contact: kontakt@finapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIDataIntelligence\Client\Model;

use \ArrayAccess;
use \OpenAPIDataIntelligence\Client\ObjectSerializer;

/**
 * IncomeReportResource Class Doc Comment
 *
 * @category Class
 * @description report format
 * @package  OpenAPIDataIntelligence\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IncomeReportResource implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IncomeReportResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'creation_date' => 'string',
        'case_id' => 'string',
        'type' => '\OpenAPIDataIntelligence\Client\Model\ReportTypeEnum',
        'start_date' => 'string',
        'end_date' => 'string',
        'days_of_report' => 'int',
        'transactions_start_date' => 'string',
        'total_transactions_count' => 'int',
        'count_income_transactions' => 'int',
        'count_spending_transactions' => 'int',
        'total_income' => 'float',
        'total_spending' => 'float',
        'total_balance' => 'float',
        'account_data' => '\OpenAPIDataIntelligence\Client\Model\AccountResourceTransactionResource[]',
        'child_reports' => '\OpenAPIDataIntelligence\Client\Model\ChildReportsResource[]',
        'total_debt' => 'float',
        'total_rent' => 'float',
        'spending_to_income_ratio' => 'float',
        'debt_to_income_ratio' => 'float',
        'rent_to_income_ratio' => 'float',
        'complete_months' => 'string[]',
        'monthly_data' => '\OpenAPIDataIntelligence\Client\Model\IncomeReportMonthlyDataResource',
        'previous_month_references' => '\OpenAPIDataIntelligence\Client\Model\PreviousMonthIncomeResource'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'creation_date' => null,
        'case_id' => null,
        'type' => null,
        'start_date' => null,
        'end_date' => null,
        'days_of_report' => null,
        'transactions_start_date' => null,
        'total_transactions_count' => null,
        'count_income_transactions' => 'int32',
        'count_spending_transactions' => 'int32',
        'total_income' => null,
        'total_spending' => null,
        'total_balance' => null,
        'account_data' => null,
        'child_reports' => null,
        'total_debt' => null,
        'total_rent' => null,
        'spending_to_income_ratio' => null,
        'debt_to_income_ratio' => null,
        'rent_to_income_ratio' => null,
        'complete_months' => null,
        'monthly_data' => null,
        'previous_month_references' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'creation_date' => false,
		'case_id' => false,
		'type' => false,
		'start_date' => false,
		'end_date' => false,
		'days_of_report' => false,
		'transactions_start_date' => false,
		'total_transactions_count' => false,
		'count_income_transactions' => false,
		'count_spending_transactions' => false,
		'total_income' => false,
		'total_spending' => false,
		'total_balance' => false,
		'account_data' => false,
		'child_reports' => false,
		'total_debt' => false,
		'total_rent' => false,
		'spending_to_income_ratio' => false,
		'debt_to_income_ratio' => false,
		'rent_to_income_ratio' => false,
		'complete_months' => false,
		'monthly_data' => false,
		'previous_month_references' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'creation_date' => 'creationDate',
        'case_id' => 'caseId',
        'type' => 'type',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'days_of_report' => 'daysOfReport',
        'transactions_start_date' => 'transactionsStartDate',
        'total_transactions_count' => 'totalTransactionsCount',
        'count_income_transactions' => 'countIncomeTransactions',
        'count_spending_transactions' => 'countSpendingTransactions',
        'total_income' => 'totalIncome',
        'total_spending' => 'totalSpending',
        'total_balance' => 'totalBalance',
        'account_data' => 'accountData',
        'child_reports' => 'childReports',
        'total_debt' => 'totalDebt',
        'total_rent' => 'totalRent',
        'spending_to_income_ratio' => 'spendingToIncomeRatio',
        'debt_to_income_ratio' => 'debtToIncomeRatio',
        'rent_to_income_ratio' => 'rentToIncomeRatio',
        'complete_months' => 'completeMonths',
        'monthly_data' => 'monthlyData',
        'previous_month_references' => 'previousMonthReferences'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'creation_date' => 'setCreationDate',
        'case_id' => 'setCaseId',
        'type' => 'setType',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'days_of_report' => 'setDaysOfReport',
        'transactions_start_date' => 'setTransactionsStartDate',
        'total_transactions_count' => 'setTotalTransactionsCount',
        'count_income_transactions' => 'setCountIncomeTransactions',
        'count_spending_transactions' => 'setCountSpendingTransactions',
        'total_income' => 'setTotalIncome',
        'total_spending' => 'setTotalSpending',
        'total_balance' => 'setTotalBalance',
        'account_data' => 'setAccountData',
        'child_reports' => 'setChildReports',
        'total_debt' => 'setTotalDebt',
        'total_rent' => 'setTotalRent',
        'spending_to_income_ratio' => 'setSpendingToIncomeRatio',
        'debt_to_income_ratio' => 'setDebtToIncomeRatio',
        'rent_to_income_ratio' => 'setRentToIncomeRatio',
        'complete_months' => 'setCompleteMonths',
        'monthly_data' => 'setMonthlyData',
        'previous_month_references' => 'setPreviousMonthReferences'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'creation_date' => 'getCreationDate',
        'case_id' => 'getCaseId',
        'type' => 'getType',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'days_of_report' => 'getDaysOfReport',
        'transactions_start_date' => 'getTransactionsStartDate',
        'total_transactions_count' => 'getTotalTransactionsCount',
        'count_income_transactions' => 'getCountIncomeTransactions',
        'count_spending_transactions' => 'getCountSpendingTransactions',
        'total_income' => 'getTotalIncome',
        'total_spending' => 'getTotalSpending',
        'total_balance' => 'getTotalBalance',
        'account_data' => 'getAccountData',
        'child_reports' => 'getChildReports',
        'total_debt' => 'getTotalDebt',
        'total_rent' => 'getTotalRent',
        'spending_to_income_ratio' => 'getSpendingToIncomeRatio',
        'debt_to_income_ratio' => 'getDebtToIncomeRatio',
        'rent_to_income_ratio' => 'getRentToIncomeRatio',
        'complete_months' => 'getCompleteMonths',
        'monthly_data' => 'getMonthlyData',
        'previous_month_references' => 'getPreviousMonthReferences'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('case_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('days_of_report', $data ?? [], null);
        $this->setIfExists('transactions_start_date', $data ?? [], null);
        $this->setIfExists('total_transactions_count', $data ?? [], null);
        $this->setIfExists('count_income_transactions', $data ?? [], null);
        $this->setIfExists('count_spending_transactions', $data ?? [], null);
        $this->setIfExists('total_income', $data ?? [], null);
        $this->setIfExists('total_spending', $data ?? [], null);
        $this->setIfExists('total_balance', $data ?? [], null);
        $this->setIfExists('account_data', $data ?? [], null);
        $this->setIfExists('child_reports', $data ?? [], null);
        $this->setIfExists('total_debt', $data ?? [], null);
        $this->setIfExists('total_rent', $data ?? [], null);
        $this->setIfExists('spending_to_income_ratio', $data ?? [], null);
        $this->setIfExists('debt_to_income_ratio', $data ?? [], null);
        $this->setIfExists('rent_to_income_ratio', $data ?? [], null);
        $this->setIfExists('complete_months', $data ?? [], null);
        $this->setIfExists('monthly_data', $data ?? [], null);
        $this->setIfExists('previous_month_references', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['creation_date'] === null) {
            $invalidProperties[] = "'creation_date' can't be null";
        }
        if ($this->container['case_id'] === null) {
            $invalidProperties[] = "'case_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['count_income_transactions'] === null) {
            $invalidProperties[] = "'count_income_transactions' can't be null";
        }
        if ($this->container['count_spending_transactions'] === null) {
            $invalidProperties[] = "'count_spending_transactions' can't be null";
        }
        if ($this->container['total_income'] === null) {
            $invalidProperties[] = "'total_income' can't be null";
        }
        if ($this->container['total_spending'] === null) {
            $invalidProperties[] = "'total_spending' can't be null";
        }
        if ($this->container['total_balance'] === null) {
            $invalidProperties[] = "'total_balance' can't be null";
        }
        if ($this->container['spending_to_income_ratio'] === null) {
            $invalidProperties[] = "'spending_to_income_ratio' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id UUID of the report
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string $creation_date Timestamp of when the report was created, in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {

        if (is_null($creation_date)) {
            throw new \InvalidArgumentException('non-nullable creation_date cannot be null');
        }

        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets case_id
     *
     * @return string
     */
    public function getCaseId()
    {
        return $this->container['case_id'];
    }

    /**
     * Sets case_id
     *
     * @param string $case_id UUID of the case file
     *
     * @return self
     */
    public function setCaseId($case_id)
    {

        if (is_null($case_id)) {
            throw new \InvalidArgumentException('non-nullable case_id cannot be null');
        }

        $this->container['case_id'] = $case_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPIDataIntelligence\Client\Model\ReportTypeEnum
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPIDataIntelligence\Client\Model\ReportTypeEnum $type type
     *
     * @return self
     */
    public function setType($type)
    {

        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date Timestamp of the start date of the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
     *
     * @return self
     */
    public function setStartDate($start_date)
    {

        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }

        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date Timestamp of the end date of the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
     *
     * @return self
     */
    public function setEndDate($end_date)
    {

        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }

        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets days_of_report
     *
     * @return int|null
     */
    public function getDaysOfReport()
    {
        return $this->container['days_of_report'];
    }

    /**
     * Sets days_of_report
     *
     * @param int|null $days_of_report The number of full days, that the report period under review contains.
     *
     * @return self
     */
    public function setDaysOfReport($days_of_report)
    {

        if (is_null($days_of_report)) {
            throw new \InvalidArgumentException('non-nullable days_of_report cannot be null');
        }

        $this->container['days_of_report'] = $days_of_report;

        return $this;
    }

    /**
     * Gets transactions_start_date
     *
     * @return string|null
     */
    public function getTransactionsStartDate()
    {
        return $this->container['transactions_start_date'];
    }

    /**
     * Sets transactions_start_date
     *
     * @param string|null $transactions_start_date Timestamp of the date, when user's first transaction took place in the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin). This field takes into consideration all the transactions of the user, irrespectively of the assigned to them label.
     *
     * @return self
     */
    public function setTransactionsStartDate($transactions_start_date)
    {

        if (is_null($transactions_start_date)) {
            throw new \InvalidArgumentException('non-nullable transactions_start_date cannot be null');
        }

        $this->container['transactions_start_date'] = $transactions_start_date;

        return $this;
    }

    /**
     * Gets total_transactions_count
     *
     * @return int|null
     */
    public function getTotalTransactionsCount()
    {
        return $this->container['total_transactions_count'];
    }

    /**
     * Sets total_transactions_count
     *
     * @param int|null $total_transactions_count The number of user's transactions, that took place in the report period under review. This field takes into consideration all the transactions of the user, irrespectively of the assigned to them label.
     *
     * @return self
     */
    public function setTotalTransactionsCount($total_transactions_count)
    {

        if (is_null($total_transactions_count)) {
            throw new \InvalidArgumentException('non-nullable total_transactions_count cannot be null');
        }

        $this->container['total_transactions_count'] = $total_transactions_count;

        return $this;
    }

    /**
     * Gets count_income_transactions
     *
     * @return int
     */
    public function getCountIncomeTransactions()
    {
        return $this->container['count_income_transactions'];
    }

    /**
     * Sets count_income_transactions
     *
     * @param int $count_income_transactions The total count of positive transactions in the report.
     *
     * @return self
     */
    public function setCountIncomeTransactions($count_income_transactions)
    {

        if (is_null($count_income_transactions)) {
            throw new \InvalidArgumentException('non-nullable count_income_transactions cannot be null');
        }

        $this->container['count_income_transactions'] = $count_income_transactions;

        return $this;
    }

    /**
     * Gets count_spending_transactions
     *
     * @return int
     */
    public function getCountSpendingTransactions()
    {
        return $this->container['count_spending_transactions'];
    }

    /**
     * Sets count_spending_transactions
     *
     * @param int $count_spending_transactions The total count of  negative transactions in the report.
     *
     * @return self
     */
    public function setCountSpendingTransactions($count_spending_transactions)
    {

        if (is_null($count_spending_transactions)) {
            throw new \InvalidArgumentException('non-nullable count_spending_transactions cannot be null');
        }

        $this->container['count_spending_transactions'] = $count_spending_transactions;

        return $this;
    }

    /**
     * Gets total_income
     *
     * @return float
     */
    public function getTotalIncome()
    {
        return $this->container['total_income'];
    }

    /**
     * Sets total_income
     *
     * @param float $total_income The total income.
     *
     * @return self
     */
    public function setTotalIncome($total_income)
    {

        if (is_null($total_income)) {
            throw new \InvalidArgumentException('non-nullable total_income cannot be null');
        }

        $this->container['total_income'] = $total_income;

        return $this;
    }

    /**
     * Gets total_spending
     *
     * @return float
     */
    public function getTotalSpending()
    {
        return $this->container['total_spending'];
    }

    /**
     * Sets total_spending
     *
     * @param float $total_spending The total spending.
     *
     * @return self
     */
    public function setTotalSpending($total_spending)
    {

        if (is_null($total_spending)) {
            throw new \InvalidArgumentException('non-nullable total_spending cannot be null');
        }

        $this->container['total_spending'] = $total_spending;

        return $this;
    }

    /**
     * Gets total_balance
     *
     * @return float
     */
    public function getTotalBalance()
    {
        return $this->container['total_balance'];
    }

    /**
     * Sets total_balance
     *
     * @param float $total_balance The total balance.
     *
     * @return self
     */
    public function setTotalBalance($total_balance)
    {

        if (is_null($total_balance)) {
            throw new \InvalidArgumentException('non-nullable total_balance cannot be null');
        }

        $this->container['total_balance'] = $total_balance;

        return $this;
    }

    /**
     * Gets account_data
     *
     * @return \OpenAPIDataIntelligence\Client\Model\AccountResourceTransactionResource[]|null
     */
    public function getAccountData()
    {
        return $this->container['account_data'];
    }

    /**
     * Sets account_data
     *
     * @param \OpenAPIDataIntelligence\Client\Model\AccountResourceTransactionResource[]|null $account_data Array of accounts-related data with the relevant transactions information.
     *
     * @return self
     */
    public function setAccountData($account_data)
    {

        if (is_null($account_data)) {
            throw new \InvalidArgumentException('non-nullable account_data cannot be null');
        }

        $this->container['account_data'] = $account_data;

        return $this;
    }

    /**
     * Gets child_reports
     *
     * @return \OpenAPIDataIntelligence\Client\Model\ChildReportsResource[]|null
     */
    public function getChildReports()
    {
        return $this->container['child_reports'];
    }

    /**
     * Sets child_reports
     *
     * @param \OpenAPIDataIntelligence\Client\Model\ChildReportsResource[]|null $child_reports Array of reports, created automatically with the specified frequency (defined by <code>interval</code> and <code>intervalPeriod</code>) once the parent report is defined as a continuous one.
     *
     * @return self
     */
    public function setChildReports($child_reports)
    {

        if (is_null($child_reports)) {
            throw new \InvalidArgumentException('non-nullable child_reports cannot be null');
        }

        $this->container['child_reports'] = $child_reports;

        return $this;
    }

    /**
     * Gets total_debt
     *
     * @return float|null
     */
    public function getTotalDebt()
    {
        return $this->container['total_debt'];
    }

    /**
     * Sets total_debt
     *
     * @param float|null $total_debt The amount spent to cover debts.
     *
     * @return self
     */
    public function setTotalDebt($total_debt)
    {

        if (is_null($total_debt)) {
            throw new \InvalidArgumentException('non-nullable total_debt cannot be null');
        }

        $this->container['total_debt'] = $total_debt;

        return $this;
    }

    /**
     * Gets total_rent
     *
     * @return float|null
     */
    public function getTotalRent()
    {
        return $this->container['total_rent'];
    }

    /**
     * Sets total_rent
     *
     * @param float|null $total_rent The amount spent to pay rent.
     *
     * @return self
     */
    public function setTotalRent($total_rent)
    {

        if (is_null($total_rent)) {
            throw new \InvalidArgumentException('non-nullable total_rent cannot be null');
        }

        $this->container['total_rent'] = $total_rent;

        return $this;
    }

    /**
     * Gets spending_to_income_ratio
     *
     * @return float
     */
    public function getSpendingToIncomeRatio()
    {
        return $this->container['spending_to_income_ratio'];
    }

    /**
     * Sets spending_to_income_ratio
     *
     * @param float $spending_to_income_ratio The relation of the amount of spending to the amount of income inside the report period under review. The value of the field will be equal to -1 in case the ratio cannot be calculated (this can happen if <code>totalIncome</code> is equal to 0).
     *
     * @return self
     */
    public function setSpendingToIncomeRatio($spending_to_income_ratio)
    {

        if (is_null($spending_to_income_ratio)) {
            throw new \InvalidArgumentException('non-nullable spending_to_income_ratio cannot be null');
        }

        $this->container['spending_to_income_ratio'] = $spending_to_income_ratio;

        return $this;
    }

    /**
     * Gets debt_to_income_ratio
     *
     * @return float|null
     */
    public function getDebtToIncomeRatio()
    {
        return $this->container['debt_to_income_ratio'];
    }

    /**
     * Sets debt_to_income_ratio
     *
     * @param float|null $debt_to_income_ratio The relation of the amount spent to cover debts to the amount of income inside the report period under review. The value of the field will be equal to -1 in case the ratio cannot be calculated (this can happen if <code>totalIncome</code> is equal to 0).
     *
     * @return self
     */
    public function setDebtToIncomeRatio($debt_to_income_ratio)
    {

        if (is_null($debt_to_income_ratio)) {
            throw new \InvalidArgumentException('non-nullable debt_to_income_ratio cannot be null');
        }

        $this->container['debt_to_income_ratio'] = $debt_to_income_ratio;

        return $this;
    }

    /**
     * Gets rent_to_income_ratio
     *
     * @return float|null
     */
    public function getRentToIncomeRatio()
    {
        return $this->container['rent_to_income_ratio'];
    }

    /**
     * Sets rent_to_income_ratio
     *
     * @param float|null $rent_to_income_ratio The relation of the amount spent to pay rent to the amount of income inside the report period under review. The value of the field will be equal to -1 in case the ratio cannot be calculated (this can happen if <code>totalIncome</code> is equal to 0).
     *
     * @return self
     */
    public function setRentToIncomeRatio($rent_to_income_ratio)
    {

        if (is_null($rent_to_income_ratio)) {
            throw new \InvalidArgumentException('non-nullable rent_to_income_ratio cannot be null');
        }

        $this->container['rent_to_income_ratio'] = $rent_to_income_ratio;

        return $this;
    }

    /**
     * Gets complete_months
     *
     * @return string[]|null
     */
    public function getCompleteMonths()
    {
        return $this->container['complete_months'];
    }

    /**
     * Sets complete_months
     *
     * @param string[]|null $complete_months complete_months
     *
     * @return self
     */
    public function setCompleteMonths($complete_months)
    {

        if (is_null($complete_months)) {
            throw new \InvalidArgumentException('non-nullable complete_months cannot be null');
        }

        $this->container['complete_months'] = $complete_months;

        return $this;
    }

    /**
     * Gets monthly_data
     *
     * @return \OpenAPIDataIntelligence\Client\Model\IncomeReportMonthlyDataResource|null
     */
    public function getMonthlyData()
    {
        return $this->container['monthly_data'];
    }

    /**
     * Sets monthly_data
     *
     * @param \OpenAPIDataIntelligence\Client\Model\IncomeReportMonthlyDataResource|null $monthly_data monthly_data
     *
     * @return self
     */
    public function setMonthlyData($monthly_data)
    {

        if (is_null($monthly_data)) {
            throw new \InvalidArgumentException('non-nullable monthly_data cannot be null');
        }

        $this->container['monthly_data'] = $monthly_data;

        return $this;
    }

    /**
     * Gets previous_month_references
     *
     * @return \OpenAPIDataIntelligence\Client\Model\PreviousMonthIncomeResource|null
     */
    public function getPreviousMonthReferences()
    {
        return $this->container['previous_month_references'];
    }

    /**
     * Sets previous_month_references
     *
     * @param \OpenAPIDataIntelligence\Client\Model\PreviousMonthIncomeResource|null $previous_month_references previous_month_references
     *
     * @return self
     */
    public function setPreviousMonthReferences($previous_month_references)
    {

        if (is_null($previous_month_references)) {
            throw new \InvalidArgumentException('non-nullable previous_month_references cannot be null');
        }

        $this->container['previous_month_references'] = $previous_month_references;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


