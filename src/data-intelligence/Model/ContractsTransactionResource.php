<?php
/**
 * ContractsTransactionResource
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPIDataIntelligence\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * finAPI Data Intelligence RESTful Services
 *
 * The following pages give you some general information on how to use the API.  The actual API services documentation then follows further below. You can use the menu to jump between API sections.   This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the 'Authorization' section of the API, or just use the OAUTH button that can be found near the TRY button.   You should also check out the Developer Portal for more information. If you need any help with the API, contact support@finapi.io   <sub>Application-Version: 1.582.0</sub>
 *
 * The version of the OpenAPI document: 2022.38.1
 * Contact: kontakt@finapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIDataIntelligence\Client\Model;

use \ArrayAccess;
use \OpenAPIDataIntelligence\Client\ObjectSerializer;

/**
 * ContractsTransactionResource Class Doc Comment
 *
 * @category Class
 * @description Chargebacks transactions
 * @package  OpenAPIDataIntelligence\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContractsTransactionResource implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContractsTransactionResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contract_ids' => 'string[]',
        'value_date' => 'string',
        'bank_booking_date' => 'string',
        'amount' => 'float',
        'purpose' => 'string',
        'counterpart_name' => 'string',
        'counterpart_account_number' => 'string',
        'counterpart_iban' => 'string',
        'counterpart_blz' => 'string',
        'counterpart_bic' => 'string',
        'counterpart_bank_name' => 'string',
        'labels' => '\OpenAPIDataIntelligence\Client\Model\LabelResource[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contract_ids' => null,
        'value_date' => null,
        'bank_booking_date' => null,
        'amount' => null,
        'purpose' => null,
        'counterpart_name' => null,
        'counterpart_account_number' => null,
        'counterpart_iban' => null,
        'counterpart_blz' => null,
        'counterpart_bic' => null,
        'counterpart_bank_name' => null,
        'labels' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'contract_ids' => false,
		'value_date' => false,
		'bank_booking_date' => false,
		'amount' => false,
		'purpose' => false,
		'counterpart_name' => false,
		'counterpart_account_number' => false,
		'counterpart_iban' => false,
		'counterpart_blz' => false,
		'counterpart_bic' => false,
		'counterpart_bank_name' => false,
		'labels' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contract_ids' => 'contractIds',
        'value_date' => 'valueDate',
        'bank_booking_date' => 'bankBookingDate',
        'amount' => 'amount',
        'purpose' => 'purpose',
        'counterpart_name' => 'counterpartName',
        'counterpart_account_number' => 'counterpartAccountNumber',
        'counterpart_iban' => 'counterpartIban',
        'counterpart_blz' => 'counterpartBlz',
        'counterpart_bic' => 'counterpartBic',
        'counterpart_bank_name' => 'counterpartBankName',
        'labels' => 'labels'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contract_ids' => 'setContractIds',
        'value_date' => 'setValueDate',
        'bank_booking_date' => 'setBankBookingDate',
        'amount' => 'setAmount',
        'purpose' => 'setPurpose',
        'counterpart_name' => 'setCounterpartName',
        'counterpart_account_number' => 'setCounterpartAccountNumber',
        'counterpart_iban' => 'setCounterpartIban',
        'counterpart_blz' => 'setCounterpartBlz',
        'counterpart_bic' => 'setCounterpartBic',
        'counterpart_bank_name' => 'setCounterpartBankName',
        'labels' => 'setLabels'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contract_ids' => 'getContractIds',
        'value_date' => 'getValueDate',
        'bank_booking_date' => 'getBankBookingDate',
        'amount' => 'getAmount',
        'purpose' => 'getPurpose',
        'counterpart_name' => 'getCounterpartName',
        'counterpart_account_number' => 'getCounterpartAccountNumber',
        'counterpart_iban' => 'getCounterpartIban',
        'counterpart_blz' => 'getCounterpartBlz',
        'counterpart_bic' => 'getCounterpartBic',
        'counterpart_bank_name' => 'getCounterpartBankName',
        'labels' => 'getLabels'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('contract_ids', $data ?? [], null);
        $this->setIfExists('value_date', $data ?? [], null);
        $this->setIfExists('bank_booking_date', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('purpose', $data ?? [], null);
        $this->setIfExists('counterpart_name', $data ?? [], null);
        $this->setIfExists('counterpart_account_number', $data ?? [], null);
        $this->setIfExists('counterpart_iban', $data ?? [], null);
        $this->setIfExists('counterpart_blz', $data ?? [], null);
        $this->setIfExists('counterpart_bic', $data ?? [], null);
        $this->setIfExists('counterpart_bank_name', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['value_date'] === null) {
            $invalidProperties[] = "'value_date' can't be null";
        }
        if ($this->container['bank_booking_date'] === null) {
            $invalidProperties[] = "'bank_booking_date' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['purpose'] === null) {
            $invalidProperties[] = "'purpose' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contract_ids
     *
     * @return string[]|null
     */
    public function getContractIds()
    {
        return $this->container['contract_ids'];
    }

    /**
     * Sets contract_ids
     *
     * @param string[]|null $contract_ids UUIDs of the contracts to which the transaction belongs
     *
     * @return self
     */
    public function setContractIds($contract_ids)
    {

        if (is_null($contract_ids)) {
            throw new \InvalidArgumentException('non-nullable contract_ids cannot be null');
        }

        $this->container['contract_ids'] = $contract_ids;

        return $this;
    }

    /**
     * Gets value_date
     *
     * @return string
     */
    public function getValueDate()
    {
        return $this->container['value_date'];
    }

    /**
     * Sets value_date
     *
     * @param string $value_date Value date in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin).
     *
     * @return self
     */
    public function setValueDate($value_date)
    {

        if (is_null($value_date)) {
            throw new \InvalidArgumentException('non-nullable value_date cannot be null');
        }

        $this->container['value_date'] = $value_date;

        return $this;
    }

    /**
     * Gets bank_booking_date
     *
     * @return string
     */
    public function getBankBookingDate()
    {
        return $this->container['bank_booking_date'];
    }

    /**
     * Sets bank_booking_date
     *
     * @param string $bank_booking_date Bank booking date in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin).
     *
     * @return self
     */
    public function setBankBookingDate($bank_booking_date)
    {

        if (is_null($bank_booking_date)) {
            throw new \InvalidArgumentException('non-nullable bank_booking_date cannot be null');
        }

        $this->container['bank_booking_date'] = $bank_booking_date;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Transaction amount
     *
     * @return self
     */
    public function setAmount($amount)
    {

        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string $purpose Transaction purpose
     *
     * @return self
     */
    public function setPurpose($purpose)
    {

        if (is_null($purpose)) {
            throw new \InvalidArgumentException('non-nullable purpose cannot be null');
        }

        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets counterpart_name
     *
     * @return string|null
     */
    public function getCounterpartName()
    {
        return $this->container['counterpart_name'];
    }

    /**
     * Sets counterpart_name
     *
     * @param string|null $counterpart_name Counterpart name
     *
     * @return self
     */
    public function setCounterpartName($counterpart_name)
    {

        if (is_null($counterpart_name)) {
            throw new \InvalidArgumentException('non-nullable counterpart_name cannot be null');
        }

        $this->container['counterpart_name'] = $counterpart_name;

        return $this;
    }

    /**
     * Gets counterpart_account_number
     *
     * @return string|null
     */
    public function getCounterpartAccountNumber()
    {
        return $this->container['counterpart_account_number'];
    }

    /**
     * Sets counterpart_account_number
     *
     * @param string|null $counterpart_account_number Counterpart account number
     *
     * @return self
     */
    public function setCounterpartAccountNumber($counterpart_account_number)
    {

        if (is_null($counterpart_account_number)) {
            throw new \InvalidArgumentException('non-nullable counterpart_account_number cannot be null');
        }

        $this->container['counterpart_account_number'] = $counterpart_account_number;

        return $this;
    }

    /**
     * Gets counterpart_iban
     *
     * @return string|null
     */
    public function getCounterpartIban()
    {
        return $this->container['counterpart_iban'];
    }

    /**
     * Sets counterpart_iban
     *
     * @param string|null $counterpart_iban Counterpart IBAN
     *
     * @return self
     */
    public function setCounterpartIban($counterpart_iban)
    {

        if (is_null($counterpart_iban)) {
            throw new \InvalidArgumentException('non-nullable counterpart_iban cannot be null');
        }

        $this->container['counterpart_iban'] = $counterpart_iban;

        return $this;
    }

    /**
     * Gets counterpart_blz
     *
     * @return string|null
     */
    public function getCounterpartBlz()
    {
        return $this->container['counterpart_blz'];
    }

    /**
     * Sets counterpart_blz
     *
     * @param string|null $counterpart_blz Counterpart BLZ
     *
     * @return self
     */
    public function setCounterpartBlz($counterpart_blz)
    {

        if (is_null($counterpart_blz)) {
            throw new \InvalidArgumentException('non-nullable counterpart_blz cannot be null');
        }

        $this->container['counterpart_blz'] = $counterpart_blz;

        return $this;
    }

    /**
     * Gets counterpart_bic
     *
     * @return string|null
     */
    public function getCounterpartBic()
    {
        return $this->container['counterpart_bic'];
    }

    /**
     * Sets counterpart_bic
     *
     * @param string|null $counterpart_bic Counterpart BIC
     *
     * @return self
     */
    public function setCounterpartBic($counterpart_bic)
    {

        if (is_null($counterpart_bic)) {
            throw new \InvalidArgumentException('non-nullable counterpart_bic cannot be null');
        }

        $this->container['counterpart_bic'] = $counterpart_bic;

        return $this;
    }

    /**
     * Gets counterpart_bank_name
     *
     * @return string|null
     */
    public function getCounterpartBankName()
    {
        return $this->container['counterpart_bank_name'];
    }

    /**
     * Sets counterpart_bank_name
     *
     * @param string|null $counterpart_bank_name Counterpart bank name
     *
     * @return self
     */
    public function setCounterpartBankName($counterpart_bank_name)
    {

        if (is_null($counterpart_bank_name)) {
            throw new \InvalidArgumentException('non-nullable counterpart_bank_name cannot be null');
        }

        $this->container['counterpart_bank_name'] = $counterpart_bank_name;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \OpenAPIDataIntelligence\Client\Model\LabelResource[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \OpenAPIDataIntelligence\Client\Model\LabelResource[]|null $labels Array of transactions labels.
     *
     * @return self
     */
    public function setLabels($labels)
    {

        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }

        $this->container['labels'] = $labels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


