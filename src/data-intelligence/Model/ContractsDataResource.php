<?php
/**
 * ContractsDataResource
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPIDataIntelligence\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * finAPI Data Intelligence RESTful Services
 *
 * The following pages give you some general information on how to use the API.  The actual API services documentation then follows further below. You can use the menu to jump between API sections.   This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the 'Authorization' section of the API, or just use the OAUTH button that can be found near the TRY button.   You should also check out the Developer Portal for more information. If you need any help with the API, contact support@finapi.io   <sub>Application-Version: 1.582.0</sub>
 *
 * The version of the OpenAPI document: 2022.38.1
 * Contact: kontakt@finapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIDataIntelligence\Client\Model;

use \ArrayAccess;
use \OpenAPIDataIntelligence\Client\ObjectSerializer;

/**
 * ContractsDataResource Class Doc Comment
 *
 * @category Class
 * @description Contracts Data
 * @package  OpenAPIDataIntelligence\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContractsDataResource implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContractsDataResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contract_id' => 'string',
        'contract_type' => 'string',
        'new_contract' => 'bool',
        'contract_status' => 'string',
        'company_name' => 'string',
        'customer_number' => 'string',
        'contract_number' => 'string',
        'company_details' => '\OpenAPIDataIntelligence\Client\Model\ContractsDataResourceCompanyDetails',
        'billing' => '\OpenAPIDataIntelligence\Client\Model\ContractsDataResourceBilling'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contract_id' => null,
        'contract_type' => null,
        'new_contract' => null,
        'contract_status' => null,
        'company_name' => null,
        'customer_number' => null,
        'contract_number' => null,
        'company_details' => null,
        'billing' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'contract_id' => false,
		'contract_type' => false,
		'new_contract' => false,
		'contract_status' => false,
		'company_name' => false,
		'customer_number' => false,
		'contract_number' => false,
		'company_details' => false,
		'billing' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contract_id' => 'contractId',
        'contract_type' => 'contractType',
        'new_contract' => 'newContract',
        'contract_status' => 'contractStatus',
        'company_name' => 'companyName',
        'customer_number' => 'customerNumber',
        'contract_number' => 'contractNumber',
        'company_details' => 'companyDetails',
        'billing' => 'billing'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contract_id' => 'setContractId',
        'contract_type' => 'setContractType',
        'new_contract' => 'setNewContract',
        'contract_status' => 'setContractStatus',
        'company_name' => 'setCompanyName',
        'customer_number' => 'setCustomerNumber',
        'contract_number' => 'setContractNumber',
        'company_details' => 'setCompanyDetails',
        'billing' => 'setBilling'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contract_id' => 'getContractId',
        'contract_type' => 'getContractType',
        'new_contract' => 'getNewContract',
        'contract_status' => 'getContractStatus',
        'company_name' => 'getCompanyName',
        'customer_number' => 'getCustomerNumber',
        'contract_number' => 'getContractNumber',
        'company_details' => 'getCompanyDetails',
        'billing' => 'getBilling'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CONTRACT_TYPE_DISABILITYINSURANCE = 'DISABILITYINSURANCE';
    public const CONTRACT_TYPE_LIABILITYINSURANCE = 'LIABILITYINSURANCE';
    public const CONTRACT_TYPE_LIFEINSURANCE = 'LIFEINSURANCE';
    public const CONTRACT_TYPE_CAREINSURANCE = 'CAREINSURANCE';
    public const CONTRACT_TYPE_CARINSURANCE = 'CARINSURANCE';
    public const CONTRACT_TYPE_LEGALINSURANCE = 'LEGALINSURANCE';
    public const CONTRACT_TYPE_ACCIDENTINSURANCE = 'ACCIDENTINSURANCE';
    public const CONTRACT_TYPE_TRAVELINSURANCE = 'TRAVELINSURANCE';
    public const CONTRACT_TYPE_HEALTHINSURANCE = 'HEALTHINSURANCE';
    public const CONTRACT_TYPE_SUPPLEMENTARYHEALTHINSURANCE = 'SUPPLEMENTARYHEALTHINSURANCE';
    public const CONTRACT_TYPE_HOMECONTENTINSURANCE = 'HOMECONTENTINSURANCE';
    public const CONTRACT_TYPE_HOMEINSURANCE = 'HOMEINSURANCE';
    public const CONTRACT_TYPE_PRIVATEPENSIONINSURANCE = 'PRIVATEPENSIONINSURANCE';
    public const CONTRACT_TYPE_ENDOWMENTINSURANCE = 'ENDOWMENTINSURANCE';
    public const CONTRACT_TYPE_CARLOAN = 'CARLOAN';
    public const CONTRACT_TYPE_REALESTATELOAN = 'REALESTATELOAN';
    public const CONTRACT_TYPE_LOANANDINTEREST = 'LOANANDINTEREST';
    public const CONTRACT_TYPE_ELECTRICITY = 'ELECTRICITY';
    public const CONTRACT_TYPE_GAS = 'GAS';
    public const CONTRACT_TYPE_PETINSURANCE = 'PETINSURANCE';
    public const CONTRACT_TYPE_PETLIABILITYINSURANCE = 'PETLIABILITYINSURANCE';
    public const CONTRACT_TYPE_PETHEALTHINSURANCE = 'PETHEALTHINSURANCE';
    public const CONTRACT_TYPE_SUPPLEMENTARYDENTALINSURANCE = 'SUPPLEMENTARYDENTALINSURANCE';
    public const CONTRACT_TYPE_TELECOMMUNICATION = 'TELECOMMUNICATION';
    public const CONTRACT_TYPE_INSURANCE = 'INSURANCE';
    public const CONTRACT_TYPE_SUBSIDIZEDLOAN = 'SUBSIDIZEDLOAN';
    public const CONTRACT_STATUS_ACTIVE = 'ACTIVE';
    public const CONTRACT_STATUS_INACTIVE = 'INACTIVE';
    public const CONTRACT_STATUS_UNKNOWN = 'UNKNOWN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContractTypeAllowableValues()
    {
        return [
            self::CONTRACT_TYPE_DISABILITYINSURANCE,
            self::CONTRACT_TYPE_LIABILITYINSURANCE,
            self::CONTRACT_TYPE_LIFEINSURANCE,
            self::CONTRACT_TYPE_CAREINSURANCE,
            self::CONTRACT_TYPE_CARINSURANCE,
            self::CONTRACT_TYPE_LEGALINSURANCE,
            self::CONTRACT_TYPE_ACCIDENTINSURANCE,
            self::CONTRACT_TYPE_TRAVELINSURANCE,
            self::CONTRACT_TYPE_HEALTHINSURANCE,
            self::CONTRACT_TYPE_SUPPLEMENTARYHEALTHINSURANCE,
            self::CONTRACT_TYPE_HOMECONTENTINSURANCE,
            self::CONTRACT_TYPE_HOMEINSURANCE,
            self::CONTRACT_TYPE_PRIVATEPENSIONINSURANCE,
            self::CONTRACT_TYPE_ENDOWMENTINSURANCE,
            self::CONTRACT_TYPE_CARLOAN,
            self::CONTRACT_TYPE_REALESTATELOAN,
            self::CONTRACT_TYPE_LOANANDINTEREST,
            self::CONTRACT_TYPE_ELECTRICITY,
            self::CONTRACT_TYPE_GAS,
            self::CONTRACT_TYPE_PETINSURANCE,
            self::CONTRACT_TYPE_PETLIABILITYINSURANCE,
            self::CONTRACT_TYPE_PETHEALTHINSURANCE,
            self::CONTRACT_TYPE_SUPPLEMENTARYDENTALINSURANCE,
            self::CONTRACT_TYPE_TELECOMMUNICATION,
            self::CONTRACT_TYPE_INSURANCE,
            self::CONTRACT_TYPE_SUBSIDIZEDLOAN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContractStatusAllowableValues()
    {
        return [
            self::CONTRACT_STATUS_ACTIVE,
            self::CONTRACT_STATUS_INACTIVE,
            self::CONTRACT_STATUS_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('contract_id', $data ?? [], null);
        $this->setIfExists('contract_type', $data ?? [], null);
        $this->setIfExists('new_contract', $data ?? [], null);
        $this->setIfExists('contract_status', $data ?? [], 'UNKNOWN');
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('customer_number', $data ?? [], null);
        $this->setIfExists('contract_number', $data ?? [], null);
        $this->setIfExists('company_details', $data ?? [], null);
        $this->setIfExists('billing', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contract_id'] === null) {
            $invalidProperties[] = "'contract_id' can't be null";
        }
        if ($this->container['contract_type'] === null) {
            $invalidProperties[] = "'contract_type' can't be null";
        }
        $allowedValues = $this->getContractTypeAllowableValues();
        if (!is_null($this->container['contract_type']) && !in_array($this->container['contract_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'contract_type', must be one of '%s'",
                $this->container['contract_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['new_contract'] === null) {
            $invalidProperties[] = "'new_contract' can't be null";
        }
        $allowedValues = $this->getContractStatusAllowableValues();
        if (!is_null($this->container['contract_status']) && !in_array($this->container['contract_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'contract_status', must be one of '%s'",
                $this->container['contract_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contract_id
     *
     * @return string
     */
    public function getContractId()
    {
        return $this->container['contract_id'];
    }

    /**
     * Sets contract_id
     *
     * @param string $contract_id UUID of the contract
     *
     * @return self
     */
    public function setContractId($contract_id)
    {

        if (is_null($contract_id)) {
            throw new \InvalidArgumentException('non-nullable contract_id cannot be null');
        }

        $this->container['contract_id'] = $contract_id;

        return $this;
    }

    /**
     * Gets contract_type
     *
     * @return string
     */
    public function getContractType()
    {
        return $this->container['contract_type'];
    }

    /**
     * Sets contract_type
     *
     * @param string $contract_type Type of the contract
     *
     * @return self
     */
    public function setContractType($contract_type)
    {
        $allowedValues = $this->getContractTypeAllowableValues();
        if (!in_array($contract_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'contract_type', must be one of '%s'",
                    $contract_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($contract_type)) {
            throw new \InvalidArgumentException('non-nullable contract_type cannot be null');
        }

        $this->container['contract_type'] = $contract_type;

        return $this;
    }

    /**
     * Gets new_contract
     *
     * @return bool
     */
    public function getNewContract()
    {
        return $this->container['new_contract'];
    }

    /**
     * Sets new_contract
     *
     * @param bool $new_contract True if it is the first report, where the given contract is present
     *
     * @return self
     */
    public function setNewContract($new_contract)
    {

        if (is_null($new_contract)) {
            throw new \InvalidArgumentException('non-nullable new_contract cannot be null');
        }

        $this->container['new_contract'] = $new_contract;

        return $this;
    }

    /**
     * Gets contract_status
     *
     * @return string|null
     */
    public function getContractStatus()
    {
        return $this->container['contract_status'];
    }

    /**
     * Sets contract_status
     *
     * @param string|null $contract_status Status of the contract. Can be: <ul> <li><code>ACTIVE</code> - the contract is active </li>  <li><code>INACTIVE</code> - the contract is inactive. There have not been any payments in the expected period.</li>  <li><code>UNKNOWN</code> - the status cannot be defined due to absence of the sufficient amount of data</li> </ul>
     *
     * @return self
     */
    public function setContractStatus($contract_status)
    {
        $allowedValues = $this->getContractStatusAllowableValues();
        if (!is_null($contract_status) && !in_array($contract_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'contract_status', must be one of '%s'",
                    $contract_status,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($contract_status)) {
            throw new \InvalidArgumentException('non-nullable contract_status cannot be null');
        }

        $this->container['contract_status'] = $contract_status;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name The name of the company with which the contract was concluded
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {

        if (is_null($company_name)) {
            throw new \InvalidArgumentException('non-nullable company_name cannot be null');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return string|null
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string|null $customer_number Customer number of the contract
     *
     * @return self
     */
    public function setCustomerNumber($customer_number)
    {

        if (is_null($customer_number)) {
            throw new \InvalidArgumentException('non-nullable customer_number cannot be null');
        }

        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets contract_number
     *
     * @return string|null
     */
    public function getContractNumber()
    {
        return $this->container['contract_number'];
    }

    /**
     * Sets contract_number
     *
     * @param string|null $contract_number Number of the detected contract
     *
     * @return self
     */
    public function setContractNumber($contract_number)
    {

        if (is_null($contract_number)) {
            throw new \InvalidArgumentException('non-nullable contract_number cannot be null');
        }

        $this->container['contract_number'] = $contract_number;

        return $this;
    }

    /**
     * Gets company_details
     *
     * @return \OpenAPIDataIntelligence\Client\Model\ContractsDataResourceCompanyDetails|null
     */
    public function getCompanyDetails()
    {
        return $this->container['company_details'];
    }

    /**
     * Sets company_details
     *
     * @param \OpenAPIDataIntelligence\Client\Model\ContractsDataResourceCompanyDetails|null $company_details company_details
     *
     * @return self
     */
    public function setCompanyDetails($company_details)
    {

        if (is_null($company_details)) {
            throw new \InvalidArgumentException('non-nullable company_details cannot be null');
        }

        $this->container['company_details'] = $company_details;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return \OpenAPIDataIntelligence\Client\Model\ContractsDataResourceBilling|null
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param \OpenAPIDataIntelligence\Client\Model\ContractsDataResourceBilling|null $billing billing
     *
     * @return self
     */
    public function setBilling($billing)
    {

        if (is_null($billing)) {
            throw new \InvalidArgumentException('non-nullable billing cannot be null');
        }

        $this->container['billing'] = $billing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


