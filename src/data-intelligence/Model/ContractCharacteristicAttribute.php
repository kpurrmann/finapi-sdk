<?php
/**
 * ContractCharacteristicAttribute
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPIDataIntelligence\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * finAPI Data Intelligence RESTful Services
 *
 * The following pages give you some general information on how to use the API.  The actual API services documentation then follows further below. You can use the menu to jump between API sections.   This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the 'Authorization' section of the API, or just use the OAUTH button that can be found near the TRY button.   You should also check out the Developer Portal for more information. If you need any help with the API, contact support@finapi.io   <sub>Application-Version: 1.582.0</sub>
 *
 * The version of the OpenAPI document: 2022.38.1
 * Contact: kontakt@finapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIDataIntelligence\Client\Model;

use \ArrayAccess;
use \OpenAPIDataIntelligence\Client\ObjectSerializer;

/**
 * ContractCharacteristicAttribute Class Doc Comment
 *
 * @category Class
 * @description Represents the SCHUFA field &lt;code&gt;Merkmalsattribute&lt;/code&gt;
 * @package  OpenAPIDataIntelligence\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContractCharacteristicAttribute implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContractCharacteristicAttribute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attribute_type' => 'string',
        'without_date_of_birth' => 'bool',
        'custom_attribute' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'attribute_type' => null,
        'without_date_of_birth' => null,
        'custom_attribute' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'attribute_type' => false,
		'without_date_of_birth' => false,
		'custom_attribute' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attribute_type' => 'attributeType',
        'without_date_of_birth' => 'withoutDateOfBirth',
        'custom_attribute' => 'customAttribute'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attribute_type' => 'setAttributeType',
        'without_date_of_birth' => 'setWithoutDateOfBirth',
        'custom_attribute' => 'setCustomAttribute'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attribute_type' => 'getAttributeType',
        'without_date_of_birth' => 'getWithoutDateOfBirth',
        'custom_attribute' => 'getCustomAttribute'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ATTRIBUTE_TYPE_MAIN = 'MAIN';
    public const ATTRIBUTE_TYPE_SUB = 'SUB';
    public const ATTRIBUTE_TYPE_SINGLE = 'SINGLE';
    public const ATTRIBUTE_TYPE_PERSON = 'PERSON';
    public const ATTRIBUTE_TYPE_COMPLETION = 'COMPLETION';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAttributeTypeAllowableValues()
    {
        return [
            self::ATTRIBUTE_TYPE_MAIN,
            self::ATTRIBUTE_TYPE_SUB,
            self::ATTRIBUTE_TYPE_SINGLE,
            self::ATTRIBUTE_TYPE_PERSON,
            self::ATTRIBUTE_TYPE_COMPLETION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('attribute_type', $data ?? [], null);
        $this->setIfExists('without_date_of_birth', $data ?? [], null);
        $this->setIfExists('custom_attribute', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['attribute_type'] === null) {
            $invalidProperties[] = "'attribute_type' can't be null";
        }
        $allowedValues = $this->getAttributeTypeAllowableValues();
        if (!is_null($this->container['attribute_type']) && !in_array($this->container['attribute_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'attribute_type', must be one of '%s'",
                $this->container['attribute_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attribute_type
     *
     * @return string
     */
    public function getAttributeType()
    {
        return $this->container['attribute_type'];
    }

    /**
     * Sets attribute_type
     *
     * @param string $attribute_type This element is mandatory and specifies what type of feature it is. It can contain the following values: <ul>   <li><code>MAIN</code> - Hauptmerkmal</li>   <li><code>SUB</code> - Untermerkmal</li>   <li><code>SINGLE</code> - Einzelmerkmal</li>   <li><code>PERSON</code> - Personenmerkmal</li>   <li><code>COMPLETION</code> - Erledigungsmerkmal</li> </ul>
     *
     * @return self
     */
    public function setAttributeType($attribute_type)
    {
        $allowedValues = $this->getAttributeTypeAllowableValues();
        if (!in_array($attribute_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'attribute_type', must be one of '%s'",
                    $attribute_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($attribute_type)) {
            throw new \InvalidArgumentException('non-nullable attribute_type cannot be null');
        }

        $this->container['attribute_type'] = $attribute_type;

        return $this;
    }

    /**
     * Gets without_date_of_birth
     *
     * @return bool|null
     */
    public function getWithoutDateOfBirth()
    {
        return $this->container['without_date_of_birth'];
    }

    /**
     * Sets without_date_of_birth
     *
     * @param bool|null $without_date_of_birth Indicator, that shows that the characteristic was reported without a date of birth. This can be an indication that the assignment to the consumer may not be absolutely certain, since the date of birth is an important identification criterion.
     *
     * @return self
     */
    public function setWithoutDateOfBirth($without_date_of_birth)
    {

        if (is_null($without_date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable without_date_of_birth cannot be null');
        }

        $this->container['without_date_of_birth'] = $without_date_of_birth;

        return $this;
    }

    /**
     * Gets custom_attribute
     *
     * @return bool|null
     */
    public function getCustomAttribute()
    {
        return $this->container['custom_attribute'];
    }

    /**
     * Sets custom_attribute
     *
     * @param bool|null $custom_attribute Indicator of  whether the feature has been reported by the participant to whom it is now being reported. The optional element is only output in case of positive assignment in the request.
     *
     * @return self
     */
    public function setCustomAttribute($custom_attribute)
    {

        if (is_null($custom_attribute)) {
            throw new \InvalidArgumentException('non-nullable custom_attribute cannot be null');
        }

        $this->container['custom_attribute'] = $custom_attribute;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


