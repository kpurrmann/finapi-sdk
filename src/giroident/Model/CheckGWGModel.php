<?php
/**
 * CheckGWGModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPIGiroIdent\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * finAPI GiroIdent Services
 *
 * GiroIdent is an user identity check service. It validates the user's personal information against the user's bank account details, and optionally against the SCHUFA account check and identity check services.  The following documentation aims to provide guidance on how to use the GiroIdent API to carry out secure online verifications of end customers. The Service is based on a set of **Checks**. As a partner application, the recommended integration of these checks is as follows:  1. Partner application calls GiroIdent service **Create Check** with the relevant parameters. GiroIdent returns a GiroIdent Redirect URL. 1. Partner application *sends* (redirects) the user to \"Web Form Redirect URL\". 1. The user follows GiroIdent UI and grants GiroIdent access to her bank account. 1. The GiroIdent UI will optionally redirect the user to a result or error URL, if configured by the partner application (via query parameters appended to the Web Form Redirect URL). 1. The partner application checks the GiroIdent result using **Get Check** service and displays the result.  All API calls have to be autorized using an OAuth2 bearer token, which represents a finAPI user identity. Creating this user identity is a pre-requisite for using the GiroIdent services. This enables GiroIdent to be integrated in more advanced usecases, including other finAPI webservices like finAPI Access or finAPI Data Intelligence.  Detailed documentation related to use and integration can be found in the [GiroIdent developer documentation](https://documentation.finapi.io/gi2.0).  How to use the finAPI Web Form, and how to integrate it as website or web component, or to configure redirects after termination: finAPI Web Form [API documentation](https://docs.finapi.io/?product=web_form_2.0) and [public documentation](https://finapi.jira.com/wiki/spaces/FWFPD).  Related to user creation and retrieval of the required authorization token to use Giroident, refer to the [finAPI Access API documentation and REST client](https://docs-testing.finapi.io/) for the finAPI sandbox environment.  <sub>Application-Version: 1.30.0</sub>
 *
 * The version of the OpenAPI document: 2022.34.1
 * Contact: kontakt@finapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIGiroIdent\Client\Model;

use \ArrayAccess;
use \OpenAPIGiroIdent\Client\ObjectSerializer;

/**
 * CheckGWGModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPIGiroIdent\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CheckGWGModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CheckGWGModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'error_message' => 'string',
        'name_equality' => 'bool',
        'name_equality_score' => 'float',
        'schufa_identity_check' => 'float',
        'schufa_proven_identity' => 'bool',
        'gi_iban_verification_score' => 'bool',
        'schufa_bank_account_check_plus_iban_p' => 'string',
        'schufa_bank_account_check_plus_iban_s' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'error_message' => null,
        'name_equality' => null,
        'name_equality_score' => null,
        'schufa_identity_check' => null,
        'schufa_proven_identity' => null,
        'gi_iban_verification_score' => null,
        'schufa_bank_account_check_plus_iban_p' => null,
        'schufa_bank_account_check_plus_iban_s' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'status' => false,
		'error_message' => false,
		'name_equality' => false,
		'name_equality_score' => false,
		'schufa_identity_check' => false,
		'schufa_proven_identity' => false,
		'gi_iban_verification_score' => false,
		'schufa_bank_account_check_plus_iban_p' => false,
		'schufa_bank_account_check_plus_iban_s' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'error_message' => 'error-message',
        'name_equality' => 'name-equality',
        'name_equality_score' => 'name-equality-score',
        'schufa_identity_check' => 'schufa-identity-check',
        'schufa_proven_identity' => 'schufa-proven-identity',
        'gi_iban_verification_score' => 'gi-iban-verification-score',
        'schufa_bank_account_check_plus_iban_p' => 'schufa-bank-account-check-plus-iban-p',
        'schufa_bank_account_check_plus_iban_s' => 'schufa-bank-account-check-plus-iban-s'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'error_message' => 'setErrorMessage',
        'name_equality' => 'setNameEquality',
        'name_equality_score' => 'setNameEqualityScore',
        'schufa_identity_check' => 'setSchufaIdentityCheck',
        'schufa_proven_identity' => 'setSchufaProvenIdentity',
        'gi_iban_verification_score' => 'setGiIbanVerificationScore',
        'schufa_bank_account_check_plus_iban_p' => 'setSchufaBankAccountCheckPlusIbanP',
        'schufa_bank_account_check_plus_iban_s' => 'setSchufaBankAccountCheckPlusIbanS'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'error_message' => 'getErrorMessage',
        'name_equality' => 'getNameEquality',
        'name_equality_score' => 'getNameEqualityScore',
        'schufa_identity_check' => 'getSchufaIdentityCheck',
        'schufa_proven_identity' => 'getSchufaProvenIdentity',
        'gi_iban_verification_score' => 'getGiIbanVerificationScore',
        'schufa_bank_account_check_plus_iban_p' => 'getSchufaBankAccountCheckPlusIbanP',
        'schufa_bank_account_check_plus_iban_s' => 'getSchufaBankAccountCheckPlusIbanS'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_NOT_STARTED = 'NOT_STARTED';
    public const STATUS_IN_PROGRESS = 'IN_PROGRESS';
    public const STATUS_REDIRECT_PAYMENT = 'REDIRECT_PAYMENT';
    public const STATUS_COMPLETED = 'COMPLETED';
    public const STATUS_COMPLETED_WITH_ERROR = 'COMPLETED_WITH_ERROR';
    public const SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_P_P01 = 'p01';
    public const SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_P_P02 = 'p02';
    public const SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_P_P03 = 'p03';
    public const SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_P_P04 = 'p04';
    public const SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_P_P05 = 'p05';
    public const SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_P_P06 = 'p06';
    public const SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_S_S01 = 's01';
    public const SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_S_S02 = 's02';
    public const SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_S_S03 = 's03';
    public const SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_S_S04 = 's04';
    public const SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_S_S05 = 's05';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NOT_STARTED,
            self::STATUS_IN_PROGRESS,
            self::STATUS_REDIRECT_PAYMENT,
            self::STATUS_COMPLETED,
            self::STATUS_COMPLETED_WITH_ERROR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSchufaBankAccountCheckPlusIbanPAllowableValues()
    {
        return [
            self::SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_P_P01,
            self::SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_P_P02,
            self::SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_P_P03,
            self::SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_P_P04,
            self::SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_P_P05,
            self::SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_P_P06,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSchufaBankAccountCheckPlusIbanSAllowableValues()
    {
        return [
            self::SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_S_S01,
            self::SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_S_S02,
            self::SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_S_S03,
            self::SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_S_S04,
            self::SCHUFA_BANK_ACCOUNT_CHECK_PLUS_IBAN_S_S05,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('error_message', $data ?? [], null);
        $this->setIfExists('name_equality', $data ?? [], null);
        $this->setIfExists('name_equality_score', $data ?? [], null);
        $this->setIfExists('schufa_identity_check', $data ?? [], null);
        $this->setIfExists('schufa_proven_identity', $data ?? [], null);
        $this->setIfExists('gi_iban_verification_score', $data ?? [], null);
        $this->setIfExists('schufa_bank_account_check_plus_iban_p', $data ?? [], null);
        $this->setIfExists('schufa_bank_account_check_plus_iban_s', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSchufaBankAccountCheckPlusIbanPAllowableValues();
        if (!is_null($this->container['schufa_bank_account_check_plus_iban_p']) && !in_array($this->container['schufa_bank_account_check_plus_iban_p'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'schufa_bank_account_check_plus_iban_p', must be one of '%s'",
                $this->container['schufa_bank_account_check_plus_iban_p'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSchufaBankAccountCheckPlusIbanSAllowableValues();
        if (!is_null($this->container['schufa_bank_account_check_plus_iban_s']) && !in_array($this->container['schufa_bank_account_check_plus_iban_s'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'schufa_bank_account_check_plus_iban_s', must be one of '%s'",
                $this->container['schufa_bank_account_check_plus_iban_s'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of a check process. <ul>   <li>NOT_STARTED - process has not been started yet.</li>   <li>IN_PROGRESS - process is ongoing.</li>   <li>REDIRECT_PAYMENT - the response contains a redirect URL to the payment web form (only relevant for GwG Total flow)</li>   <li>COMPLETED - Successful termination of the flow. The client app may evaluate the returned parameters for the identity validation.</li>   <li>COMPLETED_WITH_ERROR - An error occurred in the identity check flow.</li> </ul>
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message The message will contain details about the error if the status is COMPLETED_WITH_ERROR.
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {

        if (is_null($error_message)) {
            throw new \InvalidArgumentException('non-nullable error_message cannot be null');
        }

        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets name_equality
     *
     * @return bool|null
     */
    public function getNameEquality()
    {
        return $this->container['name_equality'];
    }

    /**
     * Sets name_equality
     *
     * @param bool|null $name_equality Normalized equality score. The threshold for the normalization is approximately 0.85 and will be continuously adopted by the algorithm.
     *
     * @return self
     */
    public function setNameEquality($name_equality)
    {

        if (is_null($name_equality)) {
            throw new \InvalidArgumentException('non-nullable name_equality cannot be null');
        }

        $this->container['name_equality'] = $name_equality;

        return $this;
    }

    /**
     * Gets name_equality_score
     *
     * @return float|null
     */
    public function getNameEqualityScore()
    {
        return $this->container['name_equality_score'];
    }

    /**
     * Sets name_equality_score
     *
     * @param float|null $name_equality_score Equality score for the best matching account holder name and first and last name provided. from (including) 0.00 to 1.00. * 0.00 no similarity at all * 1.00 completely equal
     *
     * @return self
     */
    public function setNameEqualityScore($name_equality_score)
    {

        if (is_null($name_equality_score)) {
            throw new \InvalidArgumentException('non-nullable name_equality_score cannot be null');
        }

        $this->container['name_equality_score'] = $name_equality_score;

        return $this;
    }

    /**
     * Gets schufa_identity_check
     *
     * @return float|null
     */
    public function getSchufaIdentityCheck()
    {
        return $this->container['schufa_identity_check'];
    }

    /**
     * Sets schufa_identity_check
     *
     * @param float|null $schufa_identity_check Value is 0 or between 85 and 100. 100 meaning exact match, 0 - complete missmatch. > Note: Returned only If schufa-bank-account-check-plus-iban-s is not s01 and schufa-bank-account-check-plus-iban-p is not p01.
     *
     * @return self
     */
    public function setSchufaIdentityCheck($schufa_identity_check)
    {

        if (is_null($schufa_identity_check)) {
            throw new \InvalidArgumentException('non-nullable schufa_identity_check cannot be null');
        }

        $this->container['schufa_identity_check'] = $schufa_identity_check;

        return $this;
    }

    /**
     * Gets schufa_proven_identity
     *
     * @return bool|null
     */
    public function getSchufaProvenIdentity()
    {
        return $this->container['schufa_proven_identity'];
    }

    /**
     * Sets schufa_proven_identity
     *
     * @param bool|null $schufa_proven_identity true if Schufa's premium check was positive, false otherwise. > Note: Returned only If schufa-bank-account-check-plus-iban-s is not s01 and schufa-bank-account-check-plus-iban-p is not p01.
     *
     * @return self
     */
    public function setSchufaProvenIdentity($schufa_proven_identity)
    {

        if (is_null($schufa_proven_identity)) {
            throw new \InvalidArgumentException('non-nullable schufa_proven_identity cannot be null');
        }

        $this->container['schufa_proven_identity'] = $schufa_proven_identity;

        return $this;
    }

    /**
     * Gets gi_iban_verification_score
     *
     * @return bool|null
     */
    public function getGiIbanVerificationScore()
    {
        return $this->container['gi_iban_verification_score'];
    }

    /**
     * Sets gi_iban_verification_score
     *
     * @param bool|null $gi_iban_verification_score true if the requested IBAN was found among user's accounts.
     *
     * @return self
     */
    public function setGiIbanVerificationScore($gi_iban_verification_score)
    {

        if (is_null($gi_iban_verification_score)) {
            throw new \InvalidArgumentException('non-nullable gi_iban_verification_score cannot be null');
        }

        $this->container['gi_iban_verification_score'] = $gi_iban_verification_score;

        return $this;
    }

    /**
     * Gets schufa_bank_account_check_plus_iban_p
     *
     * @return string|null
     */
    public function getSchufaBankAccountCheckPlusIbanP()
    {
        return $this->container['schufa_bank_account_check_plus_iban_p'];
    }

    /**
     * Sets schufa_bank_account_check_plus_iban_p
     *
     * @param string|null $schufa_bank_account_check_plus_iban_p result of Schufa's account syntax check. Can be interpreted according to the table checkheck type 2: Check of person identity data and bank details * p01 SCHUFA knows a combination of the bank details enquired about and the person identity data enquired about. * p02 SCHUFA knows of a payment transaction account with the bank enquired about for the person identity data enquired about. * p03 SCHUFA knows of a business relationship with the bank enquired about for the person identity data enquired about. * p04 A \"Person deceased\" note exists for the person identity data enquired about. * p05 SCHUFA does not know a combination of the bank details enquired about and the person identity data enquired about. * p06 A further check of the bank details is not carried out because the syntax check was not passed.
     *
     * @return self
     */
    public function setSchufaBankAccountCheckPlusIbanP($schufa_bank_account_check_plus_iban_p)
    {
        $allowedValues = $this->getSchufaBankAccountCheckPlusIbanPAllowableValues();
        if (!is_null($schufa_bank_account_check_plus_iban_p) && !in_array($schufa_bank_account_check_plus_iban_p, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'schufa_bank_account_check_plus_iban_p', must be one of '%s'",
                    $schufa_bank_account_check_plus_iban_p,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($schufa_bank_account_check_plus_iban_p)) {
            throw new \InvalidArgumentException('non-nullable schufa_bank_account_check_plus_iban_p cannot be null');
        }

        $this->container['schufa_bank_account_check_plus_iban_p'] = $schufa_bank_account_check_plus_iban_p;

        return $this;
    }

    /**
     * Gets schufa_bank_account_check_plus_iban_s
     *
     * @return string|null
     */
    public function getSchufaBankAccountCheckPlusIbanS()
    {
        return $this->container['schufa_bank_account_check_plus_iban_s'];
    }

    /**
     * Sets schufa_bank_account_check_plus_iban_s
     *
     * @param string|null $schufa_bank_account_check_plus_iban_s result of Schufa's account syntax check. Can be interpreted according to the table check type 1: Bank details syntax check * s01 Correct syntax of the bank details enquired about. * s02 Incorrect syntax of the bank details enquired about but the bank is known. * s03 Incorrect syntax of the bank details enquired about. * s04 The check digits checking procedure is currently not available. * s05 A check digits checking procedure does not exist for the bank enquired about or the particular bank account.
     *
     * @return self
     */
    public function setSchufaBankAccountCheckPlusIbanS($schufa_bank_account_check_plus_iban_s)
    {
        $allowedValues = $this->getSchufaBankAccountCheckPlusIbanSAllowableValues();
        if (!is_null($schufa_bank_account_check_plus_iban_s) && !in_array($schufa_bank_account_check_plus_iban_s, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'schufa_bank_account_check_plus_iban_s', must be one of '%s'",
                    $schufa_bank_account_check_plus_iban_s,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($schufa_bank_account_check_plus_iban_s)) {
            throw new \InvalidArgumentException('non-nullable schufa_bank_account_check_plus_iban_s cannot be null');
        }

        $this->container['schufa_bank_account_check_plus_iban_s'] = $schufa_bank_account_check_plus_iban_s;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


