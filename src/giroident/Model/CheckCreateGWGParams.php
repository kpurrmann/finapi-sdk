<?php
/**
 * CheckCreateGWGParams
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPIGiroIdent\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * finAPI GiroIdent Services
 *
 * GiroIdent is an user identity check service. It validates the user's personal information against the user's bank account details, and optionally against the SCHUFA account check and identity check services.  The following documentation aims to provide guidance on how to use the GiroIdent API to carry out secure online verifications of end customers. The Service is based on a set of **Checks**. As a partner application, the recommended integration of these checks is as follows:  1. Partner application calls GiroIdent service **Create Check** with the relevant parameters. GiroIdent returns a GiroIdent Redirect URL. 1. Partner application *sends* (redirects) the user to \"Web Form Redirect URL\". 1. The user follows GiroIdent UI and grants GiroIdent access to her bank account. 1. The GiroIdent UI will optionally redirect the user to a result or error URL, if configured by the partner application (via query parameters appended to the Web Form Redirect URL). 1. The partner application checks the GiroIdent result using **Get Check** service and displays the result.  All API calls have to be autorized using an OAuth2 bearer token, which represents a finAPI user identity. Creating this user identity is a pre-requisite for using the GiroIdent services. This enables GiroIdent to be integrated in more advanced usecases, including other finAPI webservices like finAPI Access or finAPI Data Intelligence.  Detailed documentation related to use and integration can be found in the [GiroIdent developer documentation](https://documentation.finapi.io/gi2.0).  How to use the finAPI Web Form, and how to integrate it as website or web component, or to configure redirects after termination: finAPI Web Form [API documentation](https://docs.finapi.io/?product=web_form_2.0) and [public documentation](https://finapi.jira.com/wiki/spaces/FWFPD).  Related to user creation and retrieval of the required authorization token to use Giroident, refer to the [finAPI Access API documentation and REST client](https://docs-testing.finapi.io/) for the finAPI sandbox environment.  <sub>Application-Version: 1.30.0</sub>
 *
 * The version of the OpenAPI document: 2022.34.1
 * Contact: kontakt@finapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIGiroIdent\Client\Model;

use \ArrayAccess;
use \OpenAPIGiroIdent\Client\ObjectSerializer;

/**
 * CheckCreateGWGParams Class Doc Comment
 *
 * @category Class
 * @package  OpenAPIGiroIdent\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CheckCreateGWGParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CheckCreateGWGParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'first_name' => 'string',
        'last_name' => 'string',
        'title' => 'string',
        'gender' => 'string',
        'date_of_birth' => 'string',
        'current_address' => '\OpenAPIGiroIdent\Client\Model\Address',
        'iban' => 'string',
        'blz' => 'string',
        'external_id' => 'string',
        'schufa_user_id' => 'string',
        'schufa_password' => 'string',
        'callback_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'first_name' => null,
        'last_name' => null,
        'title' => null,
        'gender' => null,
        'date_of_birth' => null,
        'current_address' => null,
        'iban' => null,
        'blz' => null,
        'external_id' => null,
        'schufa_user_id' => null,
        'schufa_password' => null,
        'callback_url' => 'uri'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'first_name' => false,
		'last_name' => false,
		'title' => false,
		'gender' => false,
		'date_of_birth' => false,
		'current_address' => false,
		'iban' => false,
		'blz' => false,
		'external_id' => false,
		'schufa_user_id' => false,
		'schufa_password' => false,
		'callback_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'first-name',
        'last_name' => 'last-name',
        'title' => 'title',
        'gender' => 'gender',
        'date_of_birth' => 'date-of-birth',
        'current_address' => 'current-address',
        'iban' => 'iban',
        'blz' => 'blz',
        'external_id' => 'external-id',
        'schufa_user_id' => 'schufa-user-id',
        'schufa_password' => 'schufa-password',
        'callback_url' => 'callback-url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'title' => 'setTitle',
        'gender' => 'setGender',
        'date_of_birth' => 'setDateOfBirth',
        'current_address' => 'setCurrentAddress',
        'iban' => 'setIban',
        'blz' => 'setBlz',
        'external_id' => 'setExternalId',
        'schufa_user_id' => 'setSchufaUserId',
        'schufa_password' => 'setSchufaPassword',
        'callback_url' => 'setCallbackUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'title' => 'getTitle',
        'gender' => 'getGender',
        'date_of_birth' => 'getDateOfBirth',
        'current_address' => 'getCurrentAddress',
        'iban' => 'getIban',
        'blz' => 'getBlz',
        'external_id' => 'getExternalId',
        'schufa_user_id' => 'getSchufaUserId',
        'schufa_password' => 'getSchufaPassword',
        'callback_url' => 'getCallbackUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const GENDER_F = 'F';
    public const GENDER_M = 'M';
    public const GENDER_U = 'U';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_F,
            self::GENDER_M,
            self::GENDER_U,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('current_address', $data ?? [], null);
        $this->setIfExists('iban', $data ?? [], null);
        $this->setIfExists('blz', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('schufa_user_id', $data ?? [], null);
        $this->setIfExists('schufa_password', $data ?? [], null);
        $this->setIfExists('callback_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 44)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 44.";
        }

        if ((mb_strlen($this->container['first_name']) < 2)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) > 46)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 46.";
        }

        if ((mb_strlen($this->container['last_name']) < 2)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 30)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 30.";
        }

        if ($this->container['gender'] === null) {
            $invalidProperties[] = "'gender' can't be null";
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gender', must be one of '%s'",
                $this->container['gender'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['date_of_birth'] === null) {
            $invalidProperties[] = "'date_of_birth' can't be null";
        }
        if ((mb_strlen($this->container['date_of_birth']) > 10)) {
            $invalidProperties[] = "invalid value for 'date_of_birth', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['date_of_birth']) < 10)) {
            $invalidProperties[] = "invalid value for 'date_of_birth', the character length must be bigger than or equal to 10.";
        }

        if (!preg_match("/\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$/", $this->container['date_of_birth'])) {
            $invalidProperties[] = "invalid value for 'date_of_birth', must be conform to the pattern /\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$/.";
        }

        if ($this->container['current_address'] === null) {
            $invalidProperties[] = "'current_address' can't be null";
        }
        if ($this->container['iban'] === null) {
            $invalidProperties[] = "'iban' can't be null";
        }
        if ((mb_strlen($this->container['iban']) > 64)) {
            $invalidProperties[] = "invalid value for 'iban', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['blz']) && (mb_strlen($this->container['blz']) > 32)) {
            $invalidProperties[] = "invalid value for 'blz', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['external_id']) && (mb_strlen($this->container['external_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'external_id', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['schufa_user_id'] === null) {
            $invalidProperties[] = "'schufa_user_id' can't be null";
        }
        if ($this->container['schufa_password'] === null) {
            $invalidProperties[] = "'schufa_password' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name User's first name.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if ((mb_strlen($first_name) > 44)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling CheckCreateGWGParams., must be smaller than or equal to 44.');
        }
        if ((mb_strlen($first_name) < 2)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling CheckCreateGWGParams., must be bigger than or equal to 2.');
        }


        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name User's last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if ((mb_strlen($last_name) > 46)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling CheckCreateGWGParams., must be smaller than or equal to 46.');
        }
        if ((mb_strlen($last_name) < 2)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling CheckCreateGWGParams., must be bigger than or equal to 2.');
        }


        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title of the user.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (mb_strlen($title) > 30)) {
            throw new \InvalidArgumentException('invalid length for $title when calling CheckCreateGWGParams., must be smaller than or equal to 30.');
        }


        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender User's gender. It can contain the following enums: <ul>   <li>F - Female</li>   <li>M - Male</li>   <li>U - Unknown</li> </ul>
     *
     * @return self
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gender', must be one of '%s'",
                    $gender,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }

        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return string
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param string $date_of_birth User's date of birth in the format YYYY-MM-DD.
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if ((mb_strlen($date_of_birth) > 10)) {
            throw new \InvalidArgumentException('invalid length for $date_of_birth when calling CheckCreateGWGParams., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($date_of_birth) < 10)) {
            throw new \InvalidArgumentException('invalid length for $date_of_birth when calling CheckCreateGWGParams., must be bigger than or equal to 10.');
        }
        if ((!preg_match("/\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$/", $date_of_birth))) {
            throw new \InvalidArgumentException("invalid value for \$date_of_birth when calling CheckCreateGWGParams., must conform to the pattern /\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$/.");
        }


        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }

        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets current_address
     *
     * @return \OpenAPIGiroIdent\Client\Model\Address
     */
    public function getCurrentAddress()
    {
        return $this->container['current_address'];
    }

    /**
     * Sets current_address
     *
     * @param \OpenAPIGiroIdent\Client\Model\Address $current_address current_address
     *
     * @return self
     */
    public function setCurrentAddress($current_address)
    {

        if (is_null($current_address)) {
            throw new \InvalidArgumentException('non-nullable current_address cannot be null');
        }

        $this->container['current_address'] = $current_address;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban User's IBAN.
     *
     * @return self
     */
    public function setIban($iban)
    {
        if ((mb_strlen($iban) > 64)) {
            throw new \InvalidArgumentException('invalid length for $iban when calling CheckCreateGWGParams., must be smaller than or equal to 64.');
        }


        if (is_null($iban)) {
            throw new \InvalidArgumentException('non-nullable iban cannot be null');
        }

        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets blz
     *
     * @return string|null
     */
    public function getBlz()
    {
        return $this->container['blz'];
    }

    /**
     * Sets blz
     *
     * @param string|null $blz User's BLZ.
     *
     * @return self
     */
    public function setBlz($blz)
    {
        if (!is_null($blz) && (mb_strlen($blz) > 32)) {
            throw new \InvalidArgumentException('invalid length for $blz when calling CheckCreateGWGParams., must be smaller than or equal to 32.');
        }


        if (is_null($blz)) {
            throw new \InvalidArgumentException('non-nullable blz cannot be null');
        }

        $this->container['blz'] = $blz;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Client app specific ID to be stored with the check.
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (!is_null($external_id) && (mb_strlen($external_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $external_id when calling CheckCreateGWGParams., must be smaller than or equal to 255.');
        }


        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }

        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets schufa_user_id
     *
     * @return string
     */
    public function getSchufaUserId()
    {
        return $this->container['schufa_user_id'];
    }

    /**
     * Sets schufa_user_id
     *
     * @param string $schufa_user_id Client app specific ID for caller SCHUFA’s contract (Teilnehmerkennung).
     *
     * @return self
     */
    public function setSchufaUserId($schufa_user_id)
    {

        if (is_null($schufa_user_id)) {
            throw new \InvalidArgumentException('non-nullable schufa_user_id cannot be null');
        }

        $this->container['schufa_user_id'] = $schufa_user_id;

        return $this;
    }

    /**
     * Gets schufa_password
     *
     * @return string
     */
    public function getSchufaPassword()
    {
        return $this->container['schufa_password'];
    }

    /**
     * Sets schufa_password
     *
     * @param string $schufa_password Client app specific ID to be stored with the check (Teilnehmerkennwort).
     *
     * @return self
     */
    public function setSchufaPassword($schufa_password)
    {

        if (is_null($schufa_password)) {
            throw new \InvalidArgumentException('non-nullable schufa_password cannot be null');
        }

        $this->container['schufa_password'] = $schufa_password;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string|null
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string|null $callback_url URL to which the notification with the check result is sent. The notification is sent in case of a final state of the check is reached (<code>COMPLETED</code>, <code>COMPLETED_WITH_ERROR</code>). <br> <strong>Note:</strong> a secured connection is expected to be used for the notifications, unsecured callbacks may be blocked in future SW versions.
     *
     * @return self
     */
    public function setCallbackUrl($callback_url)
    {

        if (is_null($callback_url)) {
            throw new \InvalidArgumentException('non-nullable callback_url cannot be null');
        }

        $this->container['callback_url'] = $callback_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


