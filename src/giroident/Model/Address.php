<?php
/**
 * Address
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPIGiroIdent\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * finAPI GiroIdent Services
 *
 * GiroIdent is an user identity check service. It validates the user's personal information against the user's bank account details, and optionally against the SCHUFA account check and identity check services.  The following documentation aims to provide guidance on how to use the GiroIdent API to carry out secure online verifications of end customers. The Service is based on a set of **Checks**. As a partner application, the recommended integration of these checks is as follows:  1. Partner application calls GiroIdent service **Create Check** with the relevant parameters. GiroIdent returns a GiroIdent Redirect URL. 1. Partner application *sends* (redirects) the user to \"Web Form Redirect URL\". 1. The user follows GiroIdent UI and grants GiroIdent access to her bank account. 1. The GiroIdent UI will optionally redirect the user to a result or error URL, if configured by the partner application (via query parameters appended to the Web Form Redirect URL). 1. The partner application checks the GiroIdent result using **Get Check** service and displays the result.  All API calls have to be autorized using an OAuth2 bearer token, which represents a finAPI user identity. Creating this user identity is a pre-requisite for using the GiroIdent services. This enables GiroIdent to be integrated in more advanced usecases, including other finAPI webservices like finAPI Access or finAPI Data Intelligence.  Detailed documentation related to use and integration can be found in the [GiroIdent developer documentation](https://documentation.finapi.io/gi2.0).  How to use the finAPI Web Form, and how to integrate it as website or web component, or to configure redirects after termination: finAPI Web Form [API documentation](https://docs.finapi.io/?product=web_form_2.0) and [public documentation](https://finapi.jira.com/wiki/spaces/FWFPD).  Related to user creation and retrieval of the required authorization token to use Giroident, refer to the [finAPI Access API documentation and REST client](https://docs-testing.finapi.io/) for the finAPI sandbox environment.  <sub>Application-Version: 1.30.0</sub>
 *
 * The version of the OpenAPI document: 2022.34.1
 * Contact: kontakt@finapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIGiroIdent\Client\Model;

use \ArrayAccess;
use \OpenAPIGiroIdent\Client\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @description User&#39;s current address
 * @package  OpenAPIGiroIdent\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Address implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'street' => 'string',
        'zip' => 'string',
        'city' => 'string',
        'country' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'street' => null,
        'zip' => null,
        'city' => null,
        'country' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'street' => false,
		'zip' => false,
		'city' => false,
		'country' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'street' => 'street',
        'zip' => 'zip',
        'city' => 'city',
        'country' => 'country'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'street' => 'setStreet',
        'zip' => 'setZip',
        'city' => 'setCity',
        'country' => 'setCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'street' => 'getStreet',
        'zip' => 'getZip',
        'city' => 'getCity',
        'country' => 'getCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const COUNTRY_DEU = 'DEU';
    public const COUNTRY_AUT = 'AUT';
    public const COUNTRY_CHE = 'CHE';
    public const COUNTRY_TUR = 'TUR';
    public const COUNTRY_AFG = 'AFG';
    public const COUNTRY_ALB = 'ALB';
    public const COUNTRY_DZA = 'DZA';
    public const COUNTRY_ASM = 'ASM';
    public const COUNTRY_VIR = 'VIR';
    public const COUNTRY__AND = 'AND';
    public const COUNTRY_AGO = 'AGO';
    public const COUNTRY_AIA = 'AIA';
    public const COUNTRY_ATA = 'ATA';
    public const COUNTRY_ATG = 'ATG';
    public const COUNTRY_ARG = 'ARG';
    public const COUNTRY_ARM = 'ARM';
    public const COUNTRY_ABW = 'ABW';
    public const COUNTRY_AZE = 'AZE';
    public const COUNTRY_AUS = 'AUS';
    public const COUNTRY_BHS = 'BHS';
    public const COUNTRY_BHR = 'BHR';
    public const COUNTRY_BGD = 'BGD';
    public const COUNTRY_BRB = 'BRB';
    public const COUNTRY_BLR = 'BLR';
    public const COUNTRY_BEL = 'BEL';
    public const COUNTRY_BLZ = 'BLZ';
    public const COUNTRY_BEN = 'BEN';
    public const COUNTRY_BMU = 'BMU';
    public const COUNTRY_BTN = 'BTN';
    public const COUNTRY_BOL = 'BOL';
    public const COUNTRY_BES = 'BES';
    public const COUNTRY_BIH = 'BIH';
    public const COUNTRY_BWA = 'BWA';
    public const COUNTRY_BVT = 'BVT';
    public const COUNTRY_BRA = 'BRA';
    public const COUNTRY_VGB = 'VGB';
    public const COUNTRY_IOT = 'IOT';
    public const COUNTRY_BRN = 'BRN';
    public const COUNTRY_BGR = 'BGR';
    public const COUNTRY_BFA = 'BFA';
    public const COUNTRY_BDI = 'BDI';
    public const COUNTRY_CHL = 'CHL';
    public const COUNTRY_CHN = 'CHN';
    public const COUNTRY_COK = 'COK';
    public const COUNTRY_CRI = 'CRI';
    public const COUNTRY_CUW = 'CUW';
    public const COUNTRY_CIV = 'CIV';
    public const COUNTRY_DMA = 'DMA';
    public const COUNTRY_DOM = 'DOM';
    public const COUNTRY_DJI = 'DJI';
    public const COUNTRY_DNK = 'DNK';
    public const COUNTRY_ECU = 'ECU';
    public const COUNTRY_SLV = 'SLV';
    public const COUNTRY_ERI = 'ERI';
    public const COUNTRY_EST = 'EST';
    public const COUNTRY_FLK = 'FLK';
    public const COUNTRY_FJI = 'FJI';
    public const COUNTRY_FIN = 'FIN';
    public const COUNTRY_FRA = 'FRA';
    public const COUNTRY_GUF = 'GUF';
    public const COUNTRY_PYF = 'PYF';
    public const COUNTRY_ATF = 'ATF';
    public const COUNTRY_FRO = 'FRO';
    public const COUNTRY_GAB = 'GAB';
    public const COUNTRY_GMB = 'GMB';
    public const COUNTRY_GEO = 'GEO';
    public const COUNTRY_GHA = 'GHA';
    public const COUNTRY_GIB = 'GIB';
    public const COUNTRY_GRD = 'GRD';
    public const COUNTRY_GRC = 'GRC';
    public const COUNTRY_GRL = 'GRL';
    public const COUNTRY_GLP = 'GLP';
    public const COUNTRY_GUM = 'GUM';
    public const COUNTRY_GTM = 'GTM';
    public const COUNTRY_GGY = 'GGY';
    public const COUNTRY_GIN = 'GIN';
    public const COUNTRY_GNB = 'GNB';
    public const COUNTRY_GUY = 'GUY';
    public const COUNTRY_HTI = 'HTI';
    public const COUNTRY_HMD = 'HMD';
    public const COUNTRY_HND = 'HND';
    public const COUNTRY_HKG = 'HKG';
    public const COUNTRY_IND = 'IND';
    public const COUNTRY_IDN = 'IDN';
    public const COUNTRY_IMN = 'IMN';
    public const COUNTRY_IRQ = 'IRQ';
    public const COUNTRY_IRN = 'IRN';
    public const COUNTRY_IRL = 'IRL';
    public const COUNTRY_ISL = 'ISL';
    public const COUNTRY_ISR = 'ISR';
    public const COUNTRY_ITA = 'ITA';
    public const COUNTRY_JAM = 'JAM';
    public const COUNTRY_JPN = 'JPN';
    public const COUNTRY_YEM = 'YEM';
    public const COUNTRY_JEY = 'JEY';
    public const COUNTRY_JOR = 'JOR';
    public const COUNTRY_CYM = 'CYM';
    public const COUNTRY_KHM = 'KHM';
    public const COUNTRY_CMR = 'CMR';
    public const COUNTRY_CAN = 'CAN';
    public const COUNTRY_CPV = 'CPV';
    public const COUNTRY_KAZ = 'KAZ';
    public const COUNTRY_QAT = 'QAT';
    public const COUNTRY_KEN = 'KEN';
    public const COUNTRY_KGZ = 'KGZ';
    public const COUNTRY_KIR = 'KIR';
    public const COUNTRY_CCK = 'CCK';
    public const COUNTRY_COL = 'COL';
    public const COUNTRY_COM = 'COM';
    public const COUNTRY_COD = 'COD';
    public const COUNTRY_PRK = 'PRK';
    public const COUNTRY_KOR = 'KOR';
    public const COUNTRY_HRV = 'HRV';
    public const COUNTRY_CUB = 'CUB';
    public const COUNTRY_KWT = 'KWT';
    public const COUNTRY_LAO = 'LAO';
    public const COUNTRY_LSO = 'LSO';
    public const COUNTRY_LVA = 'LVA';
    public const COUNTRY_LBN = 'LBN';
    public const COUNTRY_LBR = 'LBR';
    public const COUNTRY_LBY = 'LBY';
    public const COUNTRY_LIE = 'LIE';
    public const COUNTRY_LTU = 'LTU';
    public const COUNTRY_LUX = 'LUX';
    public const COUNTRY_MAC = 'MAC';
    public const COUNTRY_MDG = 'MDG';
    public const COUNTRY_MWI = 'MWI';
    public const COUNTRY_MYS = 'MYS';
    public const COUNTRY_MDV = 'MDV';
    public const COUNTRY_MLI = 'MLI';
    public const COUNTRY_MLT = 'MLT';
    public const COUNTRY_MAR = 'MAR';
    public const COUNTRY_MHL = 'MHL';
    public const COUNTRY_MTQ = 'MTQ';
    public const COUNTRY_MRT = 'MRT';
    public const COUNTRY_MUS = 'MUS';
    public const COUNTRY_MYT = 'MYT';
    public const COUNTRY_MKD = 'MKD';
    public const COUNTRY_MEX = 'MEX';
    public const COUNTRY_FSM = 'FSM';
    public const COUNTRY_MDA = 'MDA';
    public const COUNTRY_MCO = 'MCO';
    public const COUNTRY_MNG = 'MNG';
    public const COUNTRY_MNE = 'MNE';
    public const COUNTRY_MSR = 'MSR';
    public const COUNTRY_MOZ = 'MOZ';
    public const COUNTRY_MMR = 'MMR';
    public const COUNTRY_NAM = 'NAM';
    public const COUNTRY_NRU = 'NRU';
    public const COUNTRY_NPL = 'NPL';
    public const COUNTRY_NCL = 'NCL';
    public const COUNTRY_NZL = 'NZL';
    public const COUNTRY_NIC = 'NIC';
    public const COUNTRY_NLD = 'NLD';
    public const COUNTRY_NER = 'NER';
    public const COUNTRY_NGA = 'NGA';
    public const COUNTRY_NIU = 'NIU';
    public const COUNTRY_NFK = 'NFK';
    public const COUNTRY_NOR = 'NOR';
    public const COUNTRY_MNP = 'MNP';
    public const COUNTRY_OMN = 'OMN';
    public const COUNTRY_TLS = 'TLS';
    public const COUNTRY_PAK = 'PAK';
    public const COUNTRY_PLW = 'PLW';
    public const COUNTRY_PAN = 'PAN';
    public const COUNTRY_PNG = 'PNG';
    public const COUNTRY_PRY = 'PRY';
    public const COUNTRY_PER = 'PER';
    public const COUNTRY_PHL = 'PHL';
    public const COUNTRY_PCN = 'PCN';
    public const COUNTRY_POL = 'POL';
    public const COUNTRY_PRT = 'PRT';
    public const COUNTRY_PRI = 'PRI';
    public const COUNTRY_TWN = 'TWN';
    public const COUNTRY_COG = 'COG';
    public const COUNTRY_RWA = 'RWA';
    public const COUNTRY_ROU = 'ROU';
    public const COUNTRY_RUS = 'RUS';
    public const COUNTRY_REU = 'REU';
    public const COUNTRY_BLM = 'BLM';
    public const COUNTRY_MAF = 'MAF';
    public const COUNTRY_SPM = 'SPM';
    public const COUNTRY_SLB = 'SLB';
    public const COUNTRY_ZMB = 'ZMB';
    public const COUNTRY_WSM = 'WSM';
    public const COUNTRY_SMR = 'SMR';
    public const COUNTRY_SAU = 'SAU';
    public const COUNTRY_SWE = 'SWE';
    public const COUNTRY_SEN = 'SEN';
    public const COUNTRY_SRB = 'SRB';
    public const COUNTRY_SYC = 'SYC';
    public const COUNTRY_SLE = 'SLE';
    public const COUNTRY_ZWE = 'ZWE';
    public const COUNTRY_SGP = 'SGP';
    public const COUNTRY_SXM = 'SXM';
    public const COUNTRY_SVK = 'SVK';
    public const COUNTRY_SVN = 'SVN';
    public const COUNTRY_SOM = 'SOM';
    public const COUNTRY_ESP = 'ESP';
    public const COUNTRY_LKA = 'LKA';
    public const COUNTRY_SHN = 'SHN';
    public const COUNTRY_KNA = 'KNA';
    public const COUNTRY_LCA = 'LCA';
    public const COUNTRY_VCT = 'VCT';
    public const COUNTRY_PSE = 'PSE';
    public const COUNTRY_SDN = 'SDN';
    public const COUNTRY_SUR = 'SUR';
    public const COUNTRY_SJM = 'SJM';
    public const COUNTRY_SWZ = 'SWZ';
    public const COUNTRY_SYR = 'SYR';
    public const COUNTRY_STP = 'STP';
    public const COUNTRY_ZAF = 'ZAF';
    public const COUNTRY_SGS = 'SGS';
    public const COUNTRY_SSD = 'SSD';
    public const COUNTRY_TJK = 'TJK';
    public const COUNTRY_TZA = 'TZA';
    public const COUNTRY_THA = 'THA';
    public const COUNTRY_TGO = 'TGO';
    public const COUNTRY_TKL = 'TKL';
    public const COUNTRY_TON = 'TON';
    public const COUNTRY_TTO = 'TTO';
    public const COUNTRY_TCD = 'TCD';
    public const COUNTRY_CZE = 'CZE';
    public const COUNTRY_TUN = 'TUN';
    public const COUNTRY_TKM = 'TKM';
    public const COUNTRY_TCA = 'TCA';
    public const COUNTRY_TUV = 'TUV';
    public const COUNTRY_UGA = 'UGA';
    public const COUNTRY_UKR = 'UKR';
    public const COUNTRY_HUN = 'HUN';
    public const COUNTRY_UMI = 'UMI';
    public const COUNTRY_URY = 'URY';
    public const COUNTRY_UZB = 'UZB';
    public const COUNTRY_VUT = 'VUT';
    public const COUNTRY_VAT = 'VAT';
    public const COUNTRY_VEN = 'VEN';
    public const COUNTRY_ARE = 'ARE';
    public const COUNTRY_USA = 'USA';
    public const COUNTRY_GBR = 'GBR';
    public const COUNTRY_VNM = 'VNM';
    public const COUNTRY_CXR = 'CXR';
    public const COUNTRY_ESH = 'ESH';
    public const COUNTRY_CAF = 'CAF';
    public const COUNTRY_CYP = 'CYP';
    public const COUNTRY_EGY = 'EGY';
    public const COUNTRY_GNQ = 'GNQ';
    public const COUNTRY_ETH = 'ETH';
    public const COUNTRY_ALA = 'ALA';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCountryAllowableValues()
    {
        return [
            self::COUNTRY_DEU,
            self::COUNTRY_AUT,
            self::COUNTRY_CHE,
            self::COUNTRY_TUR,
            self::COUNTRY_AFG,
            self::COUNTRY_ALB,
            self::COUNTRY_DZA,
            self::COUNTRY_ASM,
            self::COUNTRY_VIR,
            self::COUNTRY__AND,
            self::COUNTRY_AGO,
            self::COUNTRY_AIA,
            self::COUNTRY_ATA,
            self::COUNTRY_ATG,
            self::COUNTRY_ARG,
            self::COUNTRY_ARM,
            self::COUNTRY_ABW,
            self::COUNTRY_AZE,
            self::COUNTRY_AUS,
            self::COUNTRY_BHS,
            self::COUNTRY_BHR,
            self::COUNTRY_BGD,
            self::COUNTRY_BRB,
            self::COUNTRY_BLR,
            self::COUNTRY_BEL,
            self::COUNTRY_BLZ,
            self::COUNTRY_BEN,
            self::COUNTRY_BMU,
            self::COUNTRY_BTN,
            self::COUNTRY_BOL,
            self::COUNTRY_BES,
            self::COUNTRY_BIH,
            self::COUNTRY_BWA,
            self::COUNTRY_BVT,
            self::COUNTRY_BRA,
            self::COUNTRY_VGB,
            self::COUNTRY_IOT,
            self::COUNTRY_BRN,
            self::COUNTRY_BGR,
            self::COUNTRY_BFA,
            self::COUNTRY_BDI,
            self::COUNTRY_CHL,
            self::COUNTRY_CHN,
            self::COUNTRY_COK,
            self::COUNTRY_CRI,
            self::COUNTRY_CUW,
            self::COUNTRY_CIV,
            self::COUNTRY_DMA,
            self::COUNTRY_DOM,
            self::COUNTRY_DJI,
            self::COUNTRY_DNK,
            self::COUNTRY_ECU,
            self::COUNTRY_SLV,
            self::COUNTRY_ERI,
            self::COUNTRY_EST,
            self::COUNTRY_FLK,
            self::COUNTRY_FJI,
            self::COUNTRY_FIN,
            self::COUNTRY_FRA,
            self::COUNTRY_GUF,
            self::COUNTRY_PYF,
            self::COUNTRY_ATF,
            self::COUNTRY_FRO,
            self::COUNTRY_GAB,
            self::COUNTRY_GMB,
            self::COUNTRY_GEO,
            self::COUNTRY_GHA,
            self::COUNTRY_GIB,
            self::COUNTRY_GRD,
            self::COUNTRY_GRC,
            self::COUNTRY_GRL,
            self::COUNTRY_GLP,
            self::COUNTRY_GUM,
            self::COUNTRY_GTM,
            self::COUNTRY_GGY,
            self::COUNTRY_GIN,
            self::COUNTRY_GNB,
            self::COUNTRY_GUY,
            self::COUNTRY_HTI,
            self::COUNTRY_HMD,
            self::COUNTRY_HND,
            self::COUNTRY_HKG,
            self::COUNTRY_IND,
            self::COUNTRY_IDN,
            self::COUNTRY_IMN,
            self::COUNTRY_IRQ,
            self::COUNTRY_IRN,
            self::COUNTRY_IRL,
            self::COUNTRY_ISL,
            self::COUNTRY_ISR,
            self::COUNTRY_ITA,
            self::COUNTRY_JAM,
            self::COUNTRY_JPN,
            self::COUNTRY_YEM,
            self::COUNTRY_JEY,
            self::COUNTRY_JOR,
            self::COUNTRY_CYM,
            self::COUNTRY_KHM,
            self::COUNTRY_CMR,
            self::COUNTRY_CAN,
            self::COUNTRY_CPV,
            self::COUNTRY_KAZ,
            self::COUNTRY_QAT,
            self::COUNTRY_KEN,
            self::COUNTRY_KGZ,
            self::COUNTRY_KIR,
            self::COUNTRY_CCK,
            self::COUNTRY_COL,
            self::COUNTRY_COM,
            self::COUNTRY_COD,
            self::COUNTRY_PRK,
            self::COUNTRY_KOR,
            self::COUNTRY_HRV,
            self::COUNTRY_CUB,
            self::COUNTRY_KWT,
            self::COUNTRY_LAO,
            self::COUNTRY_LSO,
            self::COUNTRY_LVA,
            self::COUNTRY_LBN,
            self::COUNTRY_LBR,
            self::COUNTRY_LBY,
            self::COUNTRY_LIE,
            self::COUNTRY_LTU,
            self::COUNTRY_LUX,
            self::COUNTRY_MAC,
            self::COUNTRY_MDG,
            self::COUNTRY_MWI,
            self::COUNTRY_MYS,
            self::COUNTRY_MDV,
            self::COUNTRY_MLI,
            self::COUNTRY_MLT,
            self::COUNTRY_MAR,
            self::COUNTRY_MHL,
            self::COUNTRY_MTQ,
            self::COUNTRY_MRT,
            self::COUNTRY_MUS,
            self::COUNTRY_MYT,
            self::COUNTRY_MKD,
            self::COUNTRY_MEX,
            self::COUNTRY_FSM,
            self::COUNTRY_MDA,
            self::COUNTRY_MCO,
            self::COUNTRY_MNG,
            self::COUNTRY_MNE,
            self::COUNTRY_MSR,
            self::COUNTRY_MOZ,
            self::COUNTRY_MMR,
            self::COUNTRY_NAM,
            self::COUNTRY_NRU,
            self::COUNTRY_NPL,
            self::COUNTRY_NCL,
            self::COUNTRY_NZL,
            self::COUNTRY_NIC,
            self::COUNTRY_NLD,
            self::COUNTRY_NER,
            self::COUNTRY_NGA,
            self::COUNTRY_NIU,
            self::COUNTRY_NFK,
            self::COUNTRY_NOR,
            self::COUNTRY_MNP,
            self::COUNTRY_OMN,
            self::COUNTRY_TLS,
            self::COUNTRY_PAK,
            self::COUNTRY_PLW,
            self::COUNTRY_PAN,
            self::COUNTRY_PNG,
            self::COUNTRY_PRY,
            self::COUNTRY_PER,
            self::COUNTRY_PHL,
            self::COUNTRY_PCN,
            self::COUNTRY_POL,
            self::COUNTRY_PRT,
            self::COUNTRY_PRI,
            self::COUNTRY_TWN,
            self::COUNTRY_COG,
            self::COUNTRY_RWA,
            self::COUNTRY_ROU,
            self::COUNTRY_RUS,
            self::COUNTRY_REU,
            self::COUNTRY_BLM,
            self::COUNTRY_MAF,
            self::COUNTRY_SPM,
            self::COUNTRY_SLB,
            self::COUNTRY_ZMB,
            self::COUNTRY_WSM,
            self::COUNTRY_SMR,
            self::COUNTRY_SAU,
            self::COUNTRY_SWE,
            self::COUNTRY_SEN,
            self::COUNTRY_SRB,
            self::COUNTRY_SYC,
            self::COUNTRY_SLE,
            self::COUNTRY_ZWE,
            self::COUNTRY_SGP,
            self::COUNTRY_SXM,
            self::COUNTRY_SVK,
            self::COUNTRY_SVN,
            self::COUNTRY_SOM,
            self::COUNTRY_ESP,
            self::COUNTRY_LKA,
            self::COUNTRY_SHN,
            self::COUNTRY_KNA,
            self::COUNTRY_LCA,
            self::COUNTRY_VCT,
            self::COUNTRY_PSE,
            self::COUNTRY_SDN,
            self::COUNTRY_SUR,
            self::COUNTRY_SJM,
            self::COUNTRY_SWZ,
            self::COUNTRY_SYR,
            self::COUNTRY_STP,
            self::COUNTRY_ZAF,
            self::COUNTRY_SGS,
            self::COUNTRY_SSD,
            self::COUNTRY_TJK,
            self::COUNTRY_TZA,
            self::COUNTRY_THA,
            self::COUNTRY_TGO,
            self::COUNTRY_TKL,
            self::COUNTRY_TON,
            self::COUNTRY_TTO,
            self::COUNTRY_TCD,
            self::COUNTRY_CZE,
            self::COUNTRY_TUN,
            self::COUNTRY_TKM,
            self::COUNTRY_TCA,
            self::COUNTRY_TUV,
            self::COUNTRY_UGA,
            self::COUNTRY_UKR,
            self::COUNTRY_HUN,
            self::COUNTRY_UMI,
            self::COUNTRY_URY,
            self::COUNTRY_UZB,
            self::COUNTRY_VUT,
            self::COUNTRY_VAT,
            self::COUNTRY_VEN,
            self::COUNTRY_ARE,
            self::COUNTRY_USA,
            self::COUNTRY_GBR,
            self::COUNTRY_VNM,
            self::COUNTRY_CXR,
            self::COUNTRY_ESH,
            self::COUNTRY_CAF,
            self::COUNTRY_CYP,
            self::COUNTRY_EGY,
            self::COUNTRY_GNQ,
            self::COUNTRY_ETH,
            self::COUNTRY_ALA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], 'DEU');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['street'] === null) {
            $invalidProperties[] = "'street' can't be null";
        }
        if ((mb_strlen($this->container['street']) > 46)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be smaller than or equal to 46.";
        }

        if ((mb_strlen($this->container['street']) < 2)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['zip'] === null) {
            $invalidProperties[] = "'zip' can't be null";
        }
        if ((mb_strlen($this->container['zip']) > 10)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['zip']) < 2)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) > 44)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 44.";
        }

        if ((mb_strlen($this->container['city']) < 2)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 2.";
        }

        $allowedValues = $this->getCountryAllowableValues();
        if (!is_null($this->container['country']) && !in_array($this->container['country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'country', must be one of '%s'",
                $this->container['country'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street Street and house number.
     *
     * @return self
     */
    public function setStreet($street)
    {
        if ((mb_strlen($street) > 46)) {
            throw new \InvalidArgumentException('invalid length for $street when calling Address., must be smaller than or equal to 46.');
        }
        if ((mb_strlen($street) < 2)) {
            throw new \InvalidArgumentException('invalid length for $street when calling Address., must be bigger than or equal to 2.');
        }


        if (is_null($street)) {
            throw new \InvalidArgumentException('non-nullable street cannot be null');
        }

        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip ZIP code.
     *
     * @return self
     */
    public function setZip($zip)
    {
        if ((mb_strlen($zip) > 10)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling Address., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($zip) < 2)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling Address., must be bigger than or equal to 2.');
        }


        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City.
     *
     * @return self
     */
    public function setCity($city)
    {
        if ((mb_strlen($city) > 44)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Address., must be smaller than or equal to 44.');
        }
        if ((mb_strlen($city) < 2)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Address., must be bigger than or equal to 2.');
        }


        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country as provided by the user
     *
     * @return self
     */
    public function setCountry($country)
    {
        $allowedValues = $this->getCountryAllowableValues();
        if (!is_null($country) && !in_array($country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'country', must be one of '%s'",
                    $country,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }

        $this->container['country'] = $country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


