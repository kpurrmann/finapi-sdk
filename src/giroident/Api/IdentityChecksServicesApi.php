<?php
/**
 * IdentityChecksServicesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPIGiroIdent\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * finAPI GiroIdent Services
 *
 * GiroIdent is an user identity check service. It validates the user's personal information against the user's bank account details, and optionally against the SCHUFA account check and identity check services.  The following documentation aims to provide guidance on how to use the GiroIdent API to carry out secure online verifications of end customers. The Service is based on a set of **Checks**. As a partner application, the recommended integration of these checks is as follows:  1. Partner application calls GiroIdent service **Create Check** with the relevant parameters. GiroIdent returns a GiroIdent Redirect URL. 1. Partner application *sends* (redirects) the user to \"Web Form Redirect URL\". 1. The user follows GiroIdent UI and grants GiroIdent access to her bank account. 1. The GiroIdent UI will optionally redirect the user to a result or error URL, if configured by the partner application (via query parameters appended to the Web Form Redirect URL). 1. The partner application checks the GiroIdent result using **Get Check** service and displays the result.  All API calls have to be autorized using an OAuth2 bearer token, which represents a finAPI user identity. Creating this user identity is a pre-requisite for using the GiroIdent services. This enables GiroIdent to be integrated in more advanced usecases, including other finAPI webservices like finAPI Access or finAPI Data Intelligence.  Detailed documentation related to use and integration can be found in the [GiroIdent developer documentation](https://documentation.finapi.io/gi2.0).  How to use the finAPI Web Form, and how to integrate it as website or web component, or to configure redirects after termination: finAPI Web Form [API documentation](https://docs.finapi.io/?product=web_form_2.0) and [public documentation](https://finapi.jira.com/wiki/spaces/FWFPD).  Related to user creation and retrieval of the required authorization token to use Giroident, refer to the [finAPI Access API documentation and REST client](https://docs-testing.finapi.io/) for the finAPI sandbox environment.  <sub>Application-Version: 1.30.0</sub>
 *
 * The version of the OpenAPI document: 2022.34.1
 * Contact: kontakt@finapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIGiroIdent\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPIGiroIdent\Client\ApiException;
use OpenAPIGiroIdent\Client\Configuration;
use OpenAPIGiroIdent\Client\HeaderSelector;
use OpenAPIGiroIdent\Client\ObjectSerializer;

/**
 * IdentityChecksServicesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPIGiroIdent\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IdentityChecksServicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createBasis
     *
     * Initiate a new GiroIdent Basis check
     *
     * @param  \OpenAPIGiroIdent\Client\Model\CheckCreateParams $check_create_params check_create_params (required)
     *
     * @throws \OpenAPIGiroIdent\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPIGiroIdent\Client\Model\CheckCreateResponse|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError
     */
    public function createBasis($check_create_params)
    {
        list($response) = $this->createBasisWithHttpInfo($check_create_params);
        return $response;
    }

    /**
     * Operation createBasisWithHttpInfo
     *
     * Initiate a new GiroIdent Basis check
     *
     * @param  \OpenAPIGiroIdent\Client\Model\CheckCreateParams $check_create_params (required)
     *
     * @throws \OpenAPIGiroIdent\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPIGiroIdent\Client\Model\CheckCreateResponse|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBasisWithHttpInfo($check_create_params)
    {
        $request = $this->createBasisRequest($check_create_params);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 201:
                    if ('\OpenAPIGiroIdent\Client\Model\CheckCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\CheckCreateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\CheckCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 403:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPIGiroIdent\Client\Model\CheckCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\CheckCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation createBasisAsync
     *
     * Initiate a new GiroIdent Basis check
     *
     * @param  \OpenAPIGiroIdent\Client\Model\CheckCreateParams $check_create_params (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBasisAsync($check_create_params)
    {
        return $this->createBasisAsyncWithHttpInfo($check_create_params)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBasisAsyncWithHttpInfo
     *
     * Initiate a new GiroIdent Basis check
     *
     * @param  \OpenAPIGiroIdent\Client\Model\CheckCreateParams $check_create_params (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBasisAsyncWithHttpInfo($check_create_params)
    {
        $returnType = '\OpenAPIGiroIdent\Client\Model\CheckCreateResponse';
        $request = $this->createBasisRequest($check_create_params);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBasis'
     *
     * @param  \OpenAPIGiroIdent\Client\Model\CheckCreateParams $check_create_params (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createBasisRequest($check_create_params)
    {

        // verify the required parameter 'check_create_params' is set
        if ($check_create_params === null || (is_array($check_create_params) && count($check_create_params) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_create_params when calling createBasis'
            );
        }

        $resourcePath = '/checks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($check_create_params)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($check_create_params));
            } else {
                $httpBody = $check_create_params;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createGWG
     *
     * Initiate a new GiroIdent GwG check
     *
     * @param  \OpenAPIGiroIdent\Client\Model\CheckCreateGWGParams $check_create_gwg_params check_create_gwg_params (required)
     *
     * @throws \OpenAPIGiroIdent\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPIGiroIdent\Client\Model\CheckCreateResponse|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError
     */
    public function createGWG($check_create_gwg_params)
    {
        list($response) = $this->createGWGWithHttpInfo($check_create_gwg_params);
        return $response;
    }

    /**
     * Operation createGWGWithHttpInfo
     *
     * Initiate a new GiroIdent GwG check
     *
     * @param  \OpenAPIGiroIdent\Client\Model\CheckCreateGWGParams $check_create_gwg_params (required)
     *
     * @throws \OpenAPIGiroIdent\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPIGiroIdent\Client\Model\CheckCreateResponse|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createGWGWithHttpInfo($check_create_gwg_params)
    {
        $request = $this->createGWGRequest($check_create_gwg_params);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 201:
                    if ('\OpenAPIGiroIdent\Client\Model\CheckCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\CheckCreateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\CheckCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 403:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPIGiroIdent\Client\Model\CheckCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\CheckCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation createGWGAsync
     *
     * Initiate a new GiroIdent GwG check
     *
     * @param  \OpenAPIGiroIdent\Client\Model\CheckCreateGWGParams $check_create_gwg_params (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createGWGAsync($check_create_gwg_params)
    {
        return $this->createGWGAsyncWithHttpInfo($check_create_gwg_params)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createGWGAsyncWithHttpInfo
     *
     * Initiate a new GiroIdent GwG check
     *
     * @param  \OpenAPIGiroIdent\Client\Model\CheckCreateGWGParams $check_create_gwg_params (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createGWGAsyncWithHttpInfo($check_create_gwg_params)
    {
        $returnType = '\OpenAPIGiroIdent\Client\Model\CheckCreateResponse';
        $request = $this->createGWGRequest($check_create_gwg_params);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createGWG'
     *
     * @param  \OpenAPIGiroIdent\Client\Model\CheckCreateGWGParams $check_create_gwg_params (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createGWGRequest($check_create_gwg_params)
    {

        // verify the required parameter 'check_create_gwg_params' is set
        if ($check_create_gwg_params === null || (is_array($check_create_gwg_params) && count($check_create_gwg_params) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_create_gwg_params when calling createGWG'
            );
        }

        $resourcePath = '/checks-gwg';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($check_create_gwg_params)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($check_create_gwg_params));
            } else {
                $httpBody = $check_create_gwg_params;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPlus
     *
     * Initiate a new GiroIdent Plus check
     *
     * @param  \OpenAPIGiroIdent\Client\Model\CheckCreatePlusParams $check_create_plus_params check_create_plus_params (required)
     *
     * @throws \OpenAPIGiroIdent\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPIGiroIdent\Client\Model\CheckCreateResponse|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError
     */
    public function createPlus($check_create_plus_params)
    {
        list($response) = $this->createPlusWithHttpInfo($check_create_plus_params);
        return $response;
    }

    /**
     * Operation createPlusWithHttpInfo
     *
     * Initiate a new GiroIdent Plus check
     *
     * @param  \OpenAPIGiroIdent\Client\Model\CheckCreatePlusParams $check_create_plus_params (required)
     *
     * @throws \OpenAPIGiroIdent\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPIGiroIdent\Client\Model\CheckCreateResponse|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPlusWithHttpInfo($check_create_plus_params)
    {
        $request = $this->createPlusRequest($check_create_plus_params);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 201:
                    if ('\OpenAPIGiroIdent\Client\Model\CheckCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\CheckCreateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\CheckCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 403:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPIGiroIdent\Client\Model\CheckCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\CheckCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation createPlusAsync
     *
     * Initiate a new GiroIdent Plus check
     *
     * @param  \OpenAPIGiroIdent\Client\Model\CheckCreatePlusParams $check_create_plus_params (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPlusAsync($check_create_plus_params)
    {
        return $this->createPlusAsyncWithHttpInfo($check_create_plus_params)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPlusAsyncWithHttpInfo
     *
     * Initiate a new GiroIdent Plus check
     *
     * @param  \OpenAPIGiroIdent\Client\Model\CheckCreatePlusParams $check_create_plus_params (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPlusAsyncWithHttpInfo($check_create_plus_params)
    {
        $returnType = '\OpenAPIGiroIdent\Client\Model\CheckCreateResponse';
        $request = $this->createPlusRequest($check_create_plus_params);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPlus'
     *
     * @param  \OpenAPIGiroIdent\Client\Model\CheckCreatePlusParams $check_create_plus_params (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPlusRequest($check_create_plus_params)
    {

        // verify the required parameter 'check_create_plus_params' is set
        if ($check_create_plus_params === null || (is_array($check_create_plus_params) && count($check_create_plus_params) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_create_plus_params when calling createPlus'
            );
        }

        $resourcePath = '/checks-plus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($check_create_plus_params)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($check_create_plus_params));
            } else {
                $httpBody = $check_create_plus_params;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBasis
     *
     * Query the GiroIdent Basis check result
     *
     * @param  string $check_id Id as returned during check creation. (required)
     *
     * @throws \OpenAPIGiroIdent\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPIGiroIdent\Client\Model\CheckModel|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError
     */
    public function getBasis($check_id)
    {
        list($response) = $this->getBasisWithHttpInfo($check_id);
        return $response;
    }

    /**
     * Operation getBasisWithHttpInfo
     *
     * Query the GiroIdent Basis check result
     *
     * @param  string $check_id Id as returned during check creation. (required)
     *
     * @throws \OpenAPIGiroIdent\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPIGiroIdent\Client\Model\CheckModel|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBasisWithHttpInfo($check_id)
    {
        $request = $this->getBasisRequest($check_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPIGiroIdent\Client\Model\CheckModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\CheckModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\CheckModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 403:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPIGiroIdent\Client\Model\CheckModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\CheckModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation getBasisAsync
     *
     * Query the GiroIdent Basis check result
     *
     * @param  string $check_id Id as returned during check creation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBasisAsync($check_id)
    {
        return $this->getBasisAsyncWithHttpInfo($check_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBasisAsyncWithHttpInfo
     *
     * Query the GiroIdent Basis check result
     *
     * @param  string $check_id Id as returned during check creation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBasisAsyncWithHttpInfo($check_id)
    {
        $returnType = '\OpenAPIGiroIdent\Client\Model\CheckModel';
        $request = $this->getBasisRequest($check_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBasis'
     *
     * @param  string $check_id Id as returned during check creation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBasisRequest($check_id)
    {

        // verify the required parameter 'check_id' is set
        if ($check_id === null || (is_array($check_id) && count($check_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_id when calling getBasis'
            );
        }

        $resourcePath = '/checks/{checkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkId' . '}',
                ObjectSerializer::toPathValue($check_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGWG
     *
     * Query the GiroIdent GwG check result
     *
     * @param  string $check_id Id as returned during check creation. (required)
     *
     * @throws \OpenAPIGiroIdent\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPIGiroIdent\Client\Model\CheckGWGModel|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError
     */
    public function getGWG($check_id)
    {
        list($response) = $this->getGWGWithHttpInfo($check_id);
        return $response;
    }

    /**
     * Operation getGWGWithHttpInfo
     *
     * Query the GiroIdent GwG check result
     *
     * @param  string $check_id Id as returned during check creation. (required)
     *
     * @throws \OpenAPIGiroIdent\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPIGiroIdent\Client\Model\CheckGWGModel|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGWGWithHttpInfo($check_id)
    {
        $request = $this->getGWGRequest($check_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPIGiroIdent\Client\Model\CheckGWGModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\CheckGWGModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\CheckGWGModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 403:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPIGiroIdent\Client\Model\CheckGWGModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\CheckGWGModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation getGWGAsync
     *
     * Query the GiroIdent GwG check result
     *
     * @param  string $check_id Id as returned during check creation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGWGAsync($check_id)
    {
        return $this->getGWGAsyncWithHttpInfo($check_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGWGAsyncWithHttpInfo
     *
     * Query the GiroIdent GwG check result
     *
     * @param  string $check_id Id as returned during check creation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGWGAsyncWithHttpInfo($check_id)
    {
        $returnType = '\OpenAPIGiroIdent\Client\Model\CheckGWGModel';
        $request = $this->getGWGRequest($check_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGWG'
     *
     * @param  string $check_id Id as returned during check creation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGWGRequest($check_id)
    {

        // verify the required parameter 'check_id' is set
        if ($check_id === null || (is_array($check_id) && count($check_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_id when calling getGWG'
            );
        }

        $resourcePath = '/checks-gwg/{checkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkId' . '}',
                ObjectSerializer::toPathValue($check_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlus
     *
     * Query the GiroIdent Plus check result
     *
     * @param  string $check_id Id as returned during check creation. (required)
     *
     * @throws \OpenAPIGiroIdent\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPIGiroIdent\Client\Model\CheckPlusModel|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError
     */
    public function getPlus($check_id)
    {
        list($response) = $this->getPlusWithHttpInfo($check_id);
        return $response;
    }

    /**
     * Operation getPlusWithHttpInfo
     *
     * Query the GiroIdent Plus check result
     *
     * @param  string $check_id Id as returned during check creation. (required)
     *
     * @throws \OpenAPIGiroIdent\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPIGiroIdent\Client\Model\CheckPlusModel|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError|\OpenAPIGiroIdent\Client\Model\ApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlusWithHttpInfo($check_id)
    {
        $request = $this->getPlusRequest($check_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPIGiroIdent\Client\Model\CheckPlusModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\CheckPlusModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\CheckPlusModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 403:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 500:
                    if ('\OpenAPIGiroIdent\Client\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPIGiroIdent\Client\Model\ApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPIGiroIdent\Client\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPIGiroIdent\Client\Model\CheckPlusModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\CheckPlusModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPIGiroIdent\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation getPlusAsync
     *
     * Query the GiroIdent Plus check result
     *
     * @param  string $check_id Id as returned during check creation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlusAsync($check_id)
    {
        return $this->getPlusAsyncWithHttpInfo($check_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlusAsyncWithHttpInfo
     *
     * Query the GiroIdent Plus check result
     *
     * @param  string $check_id Id as returned during check creation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlusAsyncWithHttpInfo($check_id)
    {
        $returnType = '\OpenAPIGiroIdent\Client\Model\CheckPlusModel';
        $request = $this->getPlusRequest($check_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlus'
     *
     * @param  string $check_id Id as returned during check creation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPlusRequest($check_id)
    {

        // verify the required parameter 'check_id' is set
        if ($check_id === null || (is_array($check_id) && count($check_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_id when calling getPlus'
            );
        }

        $resourcePath = '/checks-plus/{checkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($check_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkId' . '}',
                ObjectSerializer::toPathValue($check_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
