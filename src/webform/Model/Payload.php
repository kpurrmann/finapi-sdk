<?php
/**
 * Payload
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPIWebform\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * finAPI Web Form 2.0
 *
 * The following pages give you some general information on how to use our APIs.<br/>The actual API services documentation then follows further below. You can use the menu to jump between API sections.<br/><br/>This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the '<a target='_blank' href='https://docs.finapi.io/?product=access#tag--Authorization'>Authorization</a>' section of Access, or in case you already have a valid user token, just use the QUICK AUTH on the left.<br/>Please also remember that all user management functions should be looked up in <a target='_blank' href='https://docs.finapi.io/?product=access'>Access</a>.<br/><br/>You should also check out the <a target='_blank' href='https://documentation.finapi.io/webform/'>Web Form 2.0 Public Documentation</a> as well as <a target='_blank' href='https://documentation.finapi.io/access/'>Access Public Documentation</a> for more information. If you need any help with the API, contact <a href='mailto:support@finapi.io'>support@finapi.io</a>.<br/><h2 id=\"general-information\">General information</h2><h3 id=\"general-request-ids\"><strong>Request IDs</strong></h3>With any API call, you can pass a request ID via a header with name \"X-Request-Id\". The request ID can be an arbitrary string with up to 255 characters. Passing a longer string will result in an error.<br/><br/>If you don't pass a request ID for a call, finAPI will generate a random ID internally.<br/><br/>The request ID is always returned back in the response of a service, as a header with name \"X-Request-Id\".<br/><br/>We highly recommend to always pass a (preferably unique) request ID, and include it into your client application logs whenever you make a request or receive a response(especially in the case of an error response). finAPI is also logging request IDs on its end. Having a request ID can help the finAPI support team to work more efficiently and solve tickets faster.<h3 id=\"type-coercion\"><strong>Type Coercion</strong></h3>In order to ease the integration for some languages, which do not natively support high precision number representations, Web Form 2.0 API supports relax type binding for the openAPI type <code>number</code>, which is used for money amount fields. If you use one of those languages, to avoid precision errors that can appear from <code>float</code> values, you can pass the amount as a <code>string</code>.<h3 id=\"general-faq\"><strong>FAQ</strong></h3><strong>Is there a finAPI SDK?</strong><br/>Currently we do not offer a native SDK, but there is the option to generate an SDKfor almost any target language via OpenAPI. Use the 'Download SDK' button on this page for SDK generation.<br/><br/><strong>Why do I need to keep authorizing when calling services on this page?</strong><br/>This page is a \"one-page-app\". Reloading the page resets the OAuth authorization context. There is generally no need to reload the page, so just don't do it and your authorization will persist.
 *
 * The version of the OpenAPI document: 2.523.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIWebform\Client\Model;

use \ArrayAccess;
use \OpenAPIWebform\Client\ObjectSerializer;

/**
 * Payload Class Doc Comment
 *
 * @category Class
 * @description Payload of the web form
 * @package  OpenAPIWebform\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Payload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bank_connection_id' => 'int',
        'payment_id' => 'int',
        'standing_order_id' => 'int',
        'error_code' => 'string',
        'error_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bank_connection_id' => 'int64',
        'payment_id' => 'int64',
        'standing_order_id' => 'int64',
        'error_code' => null,
        'error_message' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bank_connection_id' => true,
		'payment_id' => true,
		'standing_order_id' => true,
		'error_code' => true,
		'error_message' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bank_connection_id' => 'bankConnectionId',
        'payment_id' => 'paymentId',
        'standing_order_id' => 'standingOrderId',
        'error_code' => 'errorCode',
        'error_message' => 'errorMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bank_connection_id' => 'setBankConnectionId',
        'payment_id' => 'setPaymentId',
        'standing_order_id' => 'setStandingOrderId',
        'error_code' => 'setErrorCode',
        'error_message' => 'setErrorMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bank_connection_id' => 'getBankConnectionId',
        'payment_id' => 'getPaymentId',
        'standing_order_id' => 'getStandingOrderId',
        'error_code' => 'getErrorCode',
        'error_message' => 'getErrorMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ERROR_CODE_ENTITY_EXISTS = 'ENTITY_EXISTS';
    public const ERROR_CODE_BANK_SERVER_REJECTION = 'BANK_SERVER_REJECTION';
    public const ERROR_CODE_INTERNAL_ERROR = 'INTERNAL_ERROR';
    public const ERROR_CODE_INTERRUPTED = 'INTERRUPTED';
    public const ERROR_CODE_INVALID_TOKEN = 'INVALID_TOKEN';
    public const ERROR_CODE_MANDATOR_MISCONFIGURATION = 'MANDATOR_MISCONFIGURATION';
    public const ERROR_CODE_NO_ACCOUNTS_FOR_TYPE_LIST = 'NO_ACCOUNTS_FOR_TYPE_LIST';
    public const ERROR_CODE_UNDETERMINED_BANK = 'UNDETERMINED_BANK';
    public const ERROR_CODE_UNEXPECTED_ACCESS_RESPONSE = 'UNEXPECTED_ACCESS_RESPONSE';
    public const ERROR_CODE_UNSUPPORTED_FEATURE = 'UNSUPPORTED_FEATURE';
    public const ERROR_CODE_UNSUPPORTED_ORDER = 'UNSUPPORTED_ORDER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getErrorCodeAllowableValues()
    {
        return [
            self::ERROR_CODE_ENTITY_EXISTS,
            self::ERROR_CODE_BANK_SERVER_REJECTION,
            self::ERROR_CODE_INTERNAL_ERROR,
            self::ERROR_CODE_INTERRUPTED,
            self::ERROR_CODE_INVALID_TOKEN,
            self::ERROR_CODE_MANDATOR_MISCONFIGURATION,
            self::ERROR_CODE_NO_ACCOUNTS_FOR_TYPE_LIST,
            self::ERROR_CODE_UNDETERMINED_BANK,
            self::ERROR_CODE_UNEXPECTED_ACCESS_RESPONSE,
            self::ERROR_CODE_UNSUPPORTED_FEATURE,
            self::ERROR_CODE_UNSUPPORTED_ORDER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bank_connection_id', $data ?? [], null);
        $this->setIfExists('payment_id', $data ?? [], null);
        $this->setIfExists('standing_order_id', $data ?? [], null);
        $this->setIfExists('error_code', $data ?? [], null);
        $this->setIfExists('error_message', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getErrorCodeAllowableValues();
        if (!is_null($this->container['error_code']) && !in_array($this->container['error_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'error_code', must be one of '%s'",
                $this->container['error_code'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bank_connection_id
     *
     * @return int|null
     */
    public function getBankConnectionId()
    {
        return $this->container['bank_connection_id'];
    }

    /**
     * Sets bank_connection_id
     *
     * @param int|null $bank_connection_id Identifier of the bank connection in the Access API. Initialized as soon as the Web Form reaches a final status and a bank connection exists in Access. Use this ID to gather Bank Connection data from Access endpoints like, \"<a target='_blank' href='https://docs.finapi.io/?product=access#get-/api/v1/bankConnections/-id-'>Get a bank connection</a>\" or \"<a target='_blank' href='https://docs.finapi.io/?product=access#get-/api/v1/accounts'>Get and search all accounts</a>\".<br/>This field is mutually exclusive with <code>paymentId</code> and <code>standingOrderId</code>.
     *
     * @return self
     */
    public function setBankConnectionId($bank_connection_id)
    {

        if (is_null($bank_connection_id)) {
            array_push($this->openAPINullablesSetToNull, 'bank_connection_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bank_connection_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['bank_connection_id'] = $bank_connection_id;

        return $this;
    }

    /**
     * Gets payment_id
     *
     * @return int|null
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param int|null $payment_id Identifier of the payment in the Access API. Initialized as soon as the Web Form reaches a final status and a payment exists in Access. Use this ID to get Payment initialization data from the Access endpoint, \"<a target='_blank' href='https://docs.finapi.io/?product=access#get-/api/v1/payments'>Get payments</a>\".<br/>This field is mutually exclusive with <code>bankConnectionId</code> and <code>standingOrderId</code>.
     *
     * @return self
     */
    public function setPaymentId($payment_id)
    {

        if (is_null($payment_id)) {
            array_push($this->openAPINullablesSetToNull, 'payment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets standing_order_id
     *
     * @return int|null
     */
    public function getStandingOrderId()
    {
        return $this->container['standing_order_id'];
    }

    /**
     * Sets standing_order_id
     *
     * @param int|null $standing_order_id Identifier of the standing order in the Access API. Initialized as soon as the Web Form reaches a final status and a standing order exists in Access. Use this ID to get Standing Order initialization data from the Access endpoint, \"<a target='_blank' href='https://docs.finapi.io/?product=access#get-/api/v1/standingOrders'>Get standing orders</a>\".<br/>This field is mutually exclusive with <code>bankConnectionId</code> and <code>paymentId</code>.
     *
     * @return self
     */
    public function setStandingOrderId($standing_order_id)
    {

        if (is_null($standing_order_id)) {
            array_push($this->openAPINullablesSetToNull, 'standing_order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('standing_order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['standing_order_id'] = $standing_order_id;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return string|null
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string|null $error_code Reason of the web form failure.<br/><strong>NOTE:</strong> This enum can be extended in the future as new cases arise!<br/><br/>Codes can be interpreted as follows:<br/>&bull; <code>ENTITY_EXISTS</code> - Access API rejected the import because of detected bank connection duplication;<br/>&bull; <code>BANK_SERVER_REJECTION</code> - the flow has been terminated on the bank side, e.g., in case of incorrect credentials;<br/>&bull; <code>INTERRUPTED</code> - web form has been reloaded or re-opened on a step where it's not supported;<br/>&bull; <code>INVALID_TOKEN</code> - the given access token expired or became invalid during the flow; <br/>&bull; <code>MANDATOR_MISCONFIGURATION</code> - the mandator is not properly configured on the Access side, e.g., it is still configured to use the old web form, or the scraper interface has been selected by the Web Form 2.0 but using it is not allowed on the mandator level. Please contact our support team (<a href='mailto:support@finapi.io'>support@finapi.io</a>) for troubleshooting;<br/>&bull; <code>NO_ACCOUNTS_FOR_TYPE_LIST</code> - in the end of the web form flow there were no accounts of type requested in the API call; <br/>&bull; <code>UNDETERMINED_BANK</code> - the given search criteria resulted in either zero or multiple bank entries;<br/>&bull; <code>UNEXPECTED_ACCESS_RESPONSE</code> - an unexpected response has been received from the Access API - similarly to the <code>INTERNAL_ERROR</code> code, please forward all details to our Customer Support team; <br/>&bull; <code>UNSUPPORTED_FEATURE</code> - Access API rejected the request because the requested feature is not supported, e.g., a payment with the execution date in the future was requested for a bank that does not support it;<br/>&bull; <code>UNSUPPORTED_ORDER</code> - Access API rejected the payment request because the associated account does not have the required capabilities;<br/>&bull; <code>INTERNAL_ERROR</code> - the reason of the failure can not be identified - please forward all the details to our Customer Support team in order to get more info and also help us to eliminate the issue.
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        $allowedValues = $this->getErrorCodeAllowableValues();
        if (!is_null($error_code) && !in_array($error_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'error_code', must be one of '%s'",
                    $error_code,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($error_code)) {
            array_push($this->openAPINullablesSetToNull, 'error_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message Details of web form failure.
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {

        if (is_null($error_message)) {
            array_push($this->openAPINullablesSetToNull, 'error_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['error_message'] = $error_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


