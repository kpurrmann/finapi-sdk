<?php
/**
 * Functionality
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPIWebform\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * finAPI Web Form 2.0
 *
 * The following pages give you some general information on how to use our APIs.<br/>The actual API services documentation then follows further below. You can use the menu to jump between API sections.<br/><br/>This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the '<a target='_blank' href='https://docs.finapi.io/?product=access#tag--Authorization'>Authorization</a>' section of Access, or in case you already have a valid user token, just use the QUICK AUTH on the left.<br/>Please also remember that all user management functions should be looked up in <a target='_blank' href='https://docs.finapi.io/?product=access'>Access</a>.<br/><br/>You should also check out the <a target='_blank' href='https://documentation.finapi.io/webform/'>Web Form 2.0 Public Documentation</a> as well as <a target='_blank' href='https://documentation.finapi.io/access/'>Access Public Documentation</a> for more information. If you need any help with the API, contact <a href='mailto:support@finapi.io'>support@finapi.io</a>.<br/><h2 id=\"general-information\">General information</h2><h3 id=\"general-request-ids\"><strong>Request IDs</strong></h3>With any API call, you can pass a request ID via a header with name \"X-Request-Id\". The request ID can be an arbitrary string with up to 255 characters. Passing a longer string will result in an error.<br/><br/>If you don't pass a request ID for a call, finAPI will generate a random ID internally.<br/><br/>The request ID is always returned back in the response of a service, as a header with name \"X-Request-Id\".<br/><br/>We highly recommend to always pass a (preferably unique) request ID, and include it into your client application logs whenever you make a request or receive a response(especially in the case of an error response). finAPI is also logging request IDs on its end. Having a request ID can help the finAPI support team to work more efficiently and solve tickets faster.<h3 id=\"type-coercion\"><strong>Type Coercion</strong></h3>In order to ease the integration for some languages, which do not natively support high precision number representations, Web Form 2.0 API supports relax type binding for the openAPI type <code>number</code>, which is used for money amount fields. If you use one of those languages, to avoid precision errors that can appear from <code>float</code> values, you can pass the amount as a <code>string</code>.<h3 id=\"general-faq\"><strong>FAQ</strong></h3><strong>Is there a finAPI SDK?</strong><br/>Currently we do not offer a native SDK, but there is the option to generate an SDKfor almost any target language via OpenAPI. Use the 'Download SDK' button on this page for SDK generation.<br/><br/><strong>Why do I need to keep authorizing when calling services on this page?</strong><br/>This page is a \"one-page-app\". Reloading the page resets the OAuth authorization context. There is generally no need to reload the page, so just don't do it and your authorization will persist.
 *
 * The version of the OpenAPI document: 2.523.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIWebform\Client\Model;

use \ArrayAccess;
use \OpenAPIWebform\Client\ObjectSerializer;

/**
 * Functionality Class Doc Comment
 *
 * @category Class
 * @description Customization of web form functionality
 * @package  OpenAPIWebform\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Functionality implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Functionality';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'progress_bar' => 'string',
        'bank_login_hint' => 'string',
        'store_secrets' => 'string',
        'bank_details' => 'string',
        'header' => 'string',
        'language' => '\OpenAPIWebform\Client\Model\Language',
        'skip_confirmation_view' => 'bool',
        'render_account_selection_view' => 'bool',
        'hide_payment_summary' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'progress_bar' => null,
        'bank_login_hint' => null,
        'store_secrets' => null,
        'bank_details' => null,
        'header' => null,
        'language' => null,
        'skip_confirmation_view' => null,
        'render_account_selection_view' => null,
        'hide_payment_summary' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'progress_bar' => true,
		'bank_login_hint' => true,
		'store_secrets' => true,
		'bank_details' => true,
		'header' => true,
		'language' => true,
		'skip_confirmation_view' => true,
		'render_account_selection_view' => true,
		'hide_payment_summary' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'progress_bar' => 'progressBar',
        'bank_login_hint' => 'bankLoginHint',
        'store_secrets' => 'storeSecrets',
        'bank_details' => 'bankDetails',
        'header' => 'header',
        'language' => 'language',
        'skip_confirmation_view' => 'skipConfirmationView',
        'render_account_selection_view' => 'renderAccountSelectionView',
        'hide_payment_summary' => 'hidePaymentSummary'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'progress_bar' => 'setProgressBar',
        'bank_login_hint' => 'setBankLoginHint',
        'store_secrets' => 'setStoreSecrets',
        'bank_details' => 'setBankDetails',
        'header' => 'setHeader',
        'language' => 'setLanguage',
        'skip_confirmation_view' => 'setSkipConfirmationView',
        'render_account_selection_view' => 'setRenderAccountSelectionView',
        'hide_payment_summary' => 'setHidePaymentSummary'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'progress_bar' => 'getProgressBar',
        'bank_login_hint' => 'getBankLoginHint',
        'store_secrets' => 'getStoreSecrets',
        'bank_details' => 'getBankDetails',
        'header' => 'getHeader',
        'language' => 'getLanguage',
        'skip_confirmation_view' => 'getSkipConfirmationView',
        'render_account_selection_view' => 'getRenderAccountSelectionView',
        'hide_payment_summary' => 'getHidePaymentSummary'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PROGRESS_BAR_RENDER = 'RENDER';
    public const PROGRESS_BAR_HIDDEN = 'HIDDEN';
    public const BANK_LOGIN_HINT_EXPANDED = 'EXPANDED';
    public const BANK_LOGIN_HINT_COLLAPSED = 'COLLAPSED';
    public const BANK_LOGIN_HINT_HIDDEN = 'HIDDEN';
    public const STORE_SECRETS_RENDER = 'RENDER';
    public const STORE_SECRETS_HIDDEN = 'HIDDEN';
    public const STORE_SECRETS_MANDATORY = 'MANDATORY';
    public const STORE_SECRETS_IMPLICIT_APPROVAL = 'IMPLICIT_APPROVAL';
    public const BANK_DETAILS_LOCKED = 'LOCKED';
    public const BANK_DETAILS_EDITABLE = 'EDITABLE';
    public const HEADER_RENDER = 'RENDER';
    public const HEADER_HIDDEN = 'HIDDEN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProgressBarAllowableValues()
    {
        return [
            self::PROGRESS_BAR_RENDER,
            self::PROGRESS_BAR_HIDDEN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBankLoginHintAllowableValues()
    {
        return [
            self::BANK_LOGIN_HINT_EXPANDED,
            self::BANK_LOGIN_HINT_COLLAPSED,
            self::BANK_LOGIN_HINT_HIDDEN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStoreSecretsAllowableValues()
    {
        return [
            self::STORE_SECRETS_RENDER,
            self::STORE_SECRETS_HIDDEN,
            self::STORE_SECRETS_MANDATORY,
            self::STORE_SECRETS_IMPLICIT_APPROVAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBankDetailsAllowableValues()
    {
        return [
            self::BANK_DETAILS_LOCKED,
            self::BANK_DETAILS_EDITABLE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHeaderAllowableValues()
    {
        return [
            self::HEADER_RENDER,
            self::HEADER_HIDDEN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('progress_bar', $data ?? [], null);
        $this->setIfExists('bank_login_hint', $data ?? [], null);
        $this->setIfExists('store_secrets', $data ?? [], null);
        $this->setIfExists('bank_details', $data ?? [], null);
        $this->setIfExists('header', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('skip_confirmation_view', $data ?? [], null);
        $this->setIfExists('render_account_selection_view', $data ?? [], null);
        $this->setIfExists('hide_payment_summary', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProgressBarAllowableValues();
        if (!is_null($this->container['progress_bar']) && !in_array($this->container['progress_bar'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'progress_bar', must be one of '%s'",
                $this->container['progress_bar'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBankLoginHintAllowableValues();
        if (!is_null($this->container['bank_login_hint']) && !in_array($this->container['bank_login_hint'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bank_login_hint', must be one of '%s'",
                $this->container['bank_login_hint'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStoreSecretsAllowableValues();
        if (!is_null($this->container['store_secrets']) && !in_array($this->container['store_secrets'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'store_secrets', must be one of '%s'",
                $this->container['store_secrets'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBankDetailsAllowableValues();
        if (!is_null($this->container['bank_details']) && !in_array($this->container['bank_details'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bank_details', must be one of '%s'",
                $this->container['bank_details'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHeaderAllowableValues();
        if (!is_null($this->container['header']) && !in_array($this->container['header'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'header', must be one of '%s'",
                $this->container['header'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets progress_bar
     *
     * @return string|null
     */
    public function getProgressBar()
    {
        return $this->container['progress_bar'];
    }

    /**
     * Sets progress_bar
     *
     * @param string|null $progress_bar Whether a progress bar is shown on the web form, letting the user know on which step he is.<br/>&bull; <code>RENDER</code> - the progress bar will be shown;<br/>&bull; <code>HIDDEN</code> - the progress bar will NOT be shown.<br/><strong>NOTE:</strong> If no value is provided, then the following value will be applied by default when web form is opened: <code>RENDER</code>.
     *
     * @return self
     */
    public function setProgressBar($progress_bar)
    {
        $allowedValues = $this->getProgressBarAllowableValues();
        if (!is_null($progress_bar) && !in_array($progress_bar, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'progress_bar', must be one of '%s'",
                    $progress_bar,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($progress_bar)) {
            array_push($this->openAPINullablesSetToNull, 'progress_bar');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('progress_bar', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['progress_bar'] = $progress_bar;

        return $this;
    }

    /**
     * Gets bank_login_hint
     *
     * @return string|null
     */
    public function getBankLoginHint()
    {
        return $this->container['bank_login_hint'];
    }

    /**
     * Sets bank_login_hint
     *
     * @param string|null $bank_login_hint How the bank login hint will be shown to the end user<br/>&bull; <code>EXPANDED</code> - the user will see the login hint and will have the option to collapse it;<br/>&bull; <code>COLLAPSED</code> - the login hint will be collapsed and the user can see it if he expands the field;<br/>&bull; <code>HIDDEN</code> - the login hint is hidden and the user cannot see it.<br/><strong>NOTE:</strong> If no value is provided, then the following value will be applied by default when web form is opened: <code>EXPANDED</code>.
     *
     * @return self
     */
    public function setBankLoginHint($bank_login_hint)
    {
        $allowedValues = $this->getBankLoginHintAllowableValues();
        if (!is_null($bank_login_hint) && !in_array($bank_login_hint, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bank_login_hint', must be one of '%s'",
                    $bank_login_hint,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($bank_login_hint)) {
            array_push($this->openAPINullablesSetToNull, 'bank_login_hint');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bank_login_hint', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['bank_login_hint'] = $bank_login_hint;

        return $this;
    }

    /**
     * Gets store_secrets
     *
     * @return string|null
     */
    public function getStoreSecrets()
    {
        return $this->container['store_secrets'];
    }

    /**
     * Sets store_secrets
     *
     * @param string|null $store_secrets Whether the user will have a checkbox to ask for storing login secrets (like a PIN) in finAPI or not.<br/>&bull; <code>RENDER</code> - the checkbox will be shown;<br/>&bull; <code>HIDDEN</code> - the checkbox will NOT be shown;<br/>&bull; <code>MANDATORY</code> - the checkbox will be shown and it will be mandatory for the end user to check it in order to continue.<br/>&bull; <code>IMPLICIT_APPROVAL</code> - the checkbox will NOT be shown but login secrets will nevertheless be stored;<br/>&nbsp;&nbsp;&nbsp;&nbsp;<strong>NOTE:</strong> This value will also automatically store the TAN method. This value can be applied ONLY by our support team. Please contact <a href='mailto:support@finapi.io'>support@finapi.io</a> with the <code>profile.id</code> as soon as you have finalized the customization for other parameters.<br/><strong>NOTE:</strong> If no value is provided, then the following value will be applied by default when web form is opened: <code>RENDER</code>.
     *
     * @return self
     */
    public function setStoreSecrets($store_secrets)
    {
        $allowedValues = $this->getStoreSecretsAllowableValues();
        if (!is_null($store_secrets) && !in_array($store_secrets, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'store_secrets', must be one of '%s'",
                    $store_secrets,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($store_secrets)) {
            array_push($this->openAPINullablesSetToNull, 'store_secrets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('store_secrets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['store_secrets'] = $store_secrets;

        return $this;
    }

    /**
     * Gets bank_details
     *
     * @return string|null
     */
    public function getBankDetails()
    {
        return $this->container['bank_details'];
    }

    /**
     * Sets bank_details
     *
     * @param string|null $bank_details Whether the user will be allowed to change the selected bank, in case a BLZ/BIC/IBAN was sent in the API request by the client.<br/>&bull; <code>LOCKED</code> - the user will be directly routed to login to the pre-selected bank;<br/>&bull; <code>EDITABLE</code> - the user will see the pre-selected bank and have the option to change it.<br/><strong>NOTE:</strong> If no value is provided, then the following value will be applied by default when web form is opened: <code>LOCKED</code>.
     *
     * @return self
     */
    public function setBankDetails($bank_details)
    {
        $allowedValues = $this->getBankDetailsAllowableValues();
        if (!is_null($bank_details) && !in_array($bank_details, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bank_details', must be one of '%s'",
                    $bank_details,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($bank_details)) {
            array_push($this->openAPINullablesSetToNull, 'bank_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bank_details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['bank_details'] = $bank_details;

        return $this;
    }

    /**
     * Gets header
     *
     * @return string|null
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     *
     * @param string|null $header Whether the header will be displayed on the web form.<br/>&bull; <code>RENDER</code> - the header will be shown;<br/>&bull; <code>HIDDEN</code> - the header will NOT be shown.<br/><strong>NOTE:</strong> If no value is provided, then the following value will be applied by default when web form is opened: <code>RENDER</code>.
     *
     * @return self
     */
    public function setHeader($header)
    {
        $allowedValues = $this->getHeaderAllowableValues();
        if (!is_null($header) && !in_array($header, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'header', must be one of '%s'",
                    $header,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($header)) {
            array_push($this->openAPINullablesSetToNull, 'header');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \OpenAPIWebform\Client\Model\Language|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \OpenAPIWebform\Client\Model\Language|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {

        if (is_null($language)) {
            array_push($this->openAPINullablesSetToNull, 'language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets skip_confirmation_view
     *
     * @return bool|null
     */
    public function getSkipConfirmationView()
    {
        return $this->container['skip_confirmation_view'];
    }

    /**
     * Sets skip_confirmation_view
     *
     * @param bool|null $skip_confirmation_view When the web form is completed successfully, it determines whether the last view will be rendered. It applies to embedded and standalone web forms. It also applies to all endpoints in the \"Account Information Services\" and \"Payment Initiation Services\".<br/>If you are embedding the web form in your application, please set up appropriate handling for the 'onComplete' method to take advantage of the feature.<br/><strong>NOTE:</strong> If no value is provided, then the following value will be applied by default when web form is opened: <code>false</code>
     *
     * @return self
     */
    public function setSkipConfirmationView($skip_confirmation_view)
    {

        if (is_null($skip_confirmation_view)) {
            array_push($this->openAPINullablesSetToNull, 'skip_confirmation_view');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skip_confirmation_view', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['skip_confirmation_view'] = $skip_confirmation_view;

        return $this;
    }

    /**
     * Gets render_account_selection_view
     *
     * @return bool|null
     */
    public function getRenderAccountSelectionView()
    {
        return $this->container['render_account_selection_view'];
    }

    /**
     * Sets render_account_selection_view
     *
     * @param bool|null $render_account_selection_view Whether the Web Form will render the \"Account Selection View\" for the end-user to choose which of the imported accounts should be saved to the database and available on the customer application.<br/><strong>NOTE:</strong> If no value is provided, then the following value will be applied by default when web form is opened: <code>false</code>
     *
     * @return self
     */
    public function setRenderAccountSelectionView($render_account_selection_view)
    {

        if (is_null($render_account_selection_view)) {
            array_push($this->openAPINullablesSetToNull, 'render_account_selection_view');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('render_account_selection_view', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['render_account_selection_view'] = $render_account_selection_view;

        return $this;
    }

    /**
     * Gets hide_payment_summary
     *
     * @return bool|null
     */
    public function getHidePaymentSummary()
    {
        return $this->container['hide_payment_summary'];
    }

    /**
     * Sets hide_payment_summary
     *
     * @param bool|null $hide_payment_summary Whether the entire payment summary is rendered on the Web Form. When set to TRUE, the counterpart data is not rendered on the Payment Summary of the Web Form.<br/><strong>NOTE:</strong> This value can be applied ONLY by our support team. Please contact <a href='mailto:support@finapi.io'>support@finapi.io</a> with the <code>profile.id</code> as soon as you have finalized the customization for other parameters.<br/><strong>NOTE:</strong> If no value is provided, then the following value will be applied by default when web form is opened: <code>false</code>
     *
     * @return self
     */
    public function setHidePaymentSummary($hide_payment_summary)
    {

        if (is_null($hide_payment_summary)) {
            array_push($this->openAPINullablesSetToNull, 'hide_payment_summary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hide_payment_summary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['hide_payment_summary'] = $hide_payment_summary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


